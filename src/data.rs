// This file is generated. Do not edit

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;
use super::config::Attributes;
use super::config::Replica;
use super::config::RangeDescriptor;
use super::config::GCPolicy;
use super::config::AcctConfig;
use super::config::PermConfig;
use super::config::ZoneConfig;
use super::config::RangeTree;
use super::config::RangeTreeNode;
use super::config::Addr;
use super::config::StoreCapacity;
use super::config::NodeDescriptor;
use super::config::StoreDescriptor;

#[derive(Clone,Default)]
pub struct Timestamp {
    // message fields
    wall_time: ::std::option::Option<i64>,
    logical: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Timestamp {
    pub fn new() -> Timestamp {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Timestamp {
        static mut instance: ::protobuf::lazy::Lazy<Timestamp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Timestamp,
        };
        unsafe {
            instance.get(|| {
                Timestamp {
                    wall_time: ::std::option::Option::None,
                    logical: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 wall_time = 1;

    pub fn clear_wall_time(&mut self) {
        self.wall_time = ::std::option::Option::None;
    }

    pub fn has_wall_time(&self) -> bool {
        self.wall_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wall_time(&mut self, v: i64) {
        self.wall_time = ::std::option::Option::Some(v);
    }

    pub fn get_wall_time<'a>(&self) -> i64 {
        self.wall_time.unwrap_or(0)
    }

    // optional int32 logical = 2;

    pub fn clear_logical(&mut self) {
        self.logical = ::std::option::Option::None;
    }

    pub fn has_logical(&self) -> bool {
        self.logical.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logical(&mut self, v: i32) {
        self.logical = ::std::option::Option::Some(v);
    }

    pub fn get_logical<'a>(&self) -> i32 {
        self.logical.unwrap_or(0)
    }
}

impl ::protobuf::Message for Timestamp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.wall_time = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.logical = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.wall_time.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.logical.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.wall_time {
            try!(os.write_int64(1, v));
        };
        if let Some(v) = self.logical {
            try!(os.write_int32(2, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Timestamp>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Timestamp {
    fn new() -> Timestamp {
        Timestamp::new()
    }

    fn descriptor_static(_: ::std::option::Option<Timestamp>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "wall_time",
                    Timestamp::has_wall_time,
                    Timestamp::get_wall_time,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "logical",
                    Timestamp::has_logical,
                    Timestamp::get_logical,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Timestamp>(
                    "Timestamp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Timestamp {
    fn clear(&mut self) {
        self.clear_wall_time();
        self.clear_logical();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Timestamp {
    fn eq(&self, other: &Timestamp) -> bool {
        self.wall_time == other.wall_time &&
        self.logical == other.logical &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Timestamp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Value {
    // message fields
    bytes: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    integer: ::std::option::Option<i64>,
    checksum: ::std::option::Option<u32>,
    timestamp: ::protobuf::SingularPtrField<Timestamp>,
    tag: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Value {
    pub fn new() -> Value {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Value {
        static mut instance: ::protobuf::lazy::Lazy<Value> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Value,
        };
        unsafe {
            instance.get(|| {
                Value {
                    bytes: ::protobuf::SingularField::none(),
                    integer: ::std::option::Option::None,
                    checksum: ::std::option::Option::None,
                    timestamp: ::protobuf::SingularPtrField::none(),
                    tag: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional bytes bytes = 1;

    pub fn clear_bytes(&mut self) {
        self.bytes.clear();
    }

    pub fn has_bytes(&self) -> bool {
        self.bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.bytes.is_none() {
            self.bytes.set_default();
        };
        self.bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_bytes<'a>(&'a self) -> &'a [u8] {
        match self.bytes.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional int64 integer = 2;

    pub fn clear_integer(&mut self) {
        self.integer = ::std::option::Option::None;
    }

    pub fn has_integer(&self) -> bool {
        self.integer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_integer(&mut self, v: i64) {
        self.integer = ::std::option::Option::Some(v);
    }

    pub fn get_integer<'a>(&self) -> i64 {
        self.integer.unwrap_or(0)
    }

    // optional fixed32 checksum = 3;

    pub fn clear_checksum(&mut self) {
        self.checksum = ::std::option::Option::None;
    }

    pub fn has_checksum(&self) -> bool {
        self.checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: u32) {
        self.checksum = ::std::option::Option::Some(v);
    }

    pub fn get_checksum<'a>(&self) -> u32 {
        self.checksum.unwrap_or(0)
    }

    // optional .cockroach.proto.Timestamp timestamp = 4;

    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        };
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> Timestamp {
        self.timestamp.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_timestamp<'a>(&'a self) -> &'a Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional string tag = 5;

    pub fn clear_tag(&mut self) {
        self.tag.clear();
    }

    pub fn has_tag(&self) -> bool {
        self.tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.tag.is_none() {
            self.tag.set_default();
        };
        self.tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        self.tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_tag<'a>(&'a self) -> &'a str {
        match self.tag.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for Value {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.bytes.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.integer = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_fixed32());
                    self.checksum = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.timestamp.set_default();
                    try!(is.merge_message(tmp))
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.tag.set_default();
                    try!(is.read_string_into(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.bytes.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.integer.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.checksum.is_some() {
            my_size += 5;
        };
        for value in self.timestamp.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.tag.iter() {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.bytes.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        if let Some(v) = self.integer {
            try!(os.write_int64(2, v));
        };
        if let Some(v) = self.checksum {
            try!(os.write_fixed32(3, v));
        };
        if let Some(v) = self.timestamp.as_ref() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.tag.as_ref() {
            try!(os.write_string(5, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Value>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Value {
    fn new() -> Value {
        Value::new()
    }

    fn descriptor_static(_: ::std::option::Option<Value>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "bytes",
                    Value::has_bytes,
                    Value::get_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "integer",
                    Value::has_integer,
                    Value::get_integer,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "checksum",
                    Value::has_checksum,
                    Value::get_checksum,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "timestamp",
                    Value::has_timestamp,
                    Value::get_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "tag",
                    Value::has_tag,
                    Value::get_tag,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Value>(
                    "Value",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Value {
    fn clear(&mut self) {
        self.clear_bytes();
        self.clear_integer();
        self.clear_checksum();
        self.clear_timestamp();
        self.clear_tag();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Value {
    fn eq(&self, other: &Value) -> bool {
        self.bytes == other.bytes &&
        self.integer == other.integer &&
        self.checksum == other.checksum &&
        self.timestamp == other.timestamp &&
        self.tag == other.tag &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct MVCCValue {
    // message fields
    deleted: ::std::option::Option<bool>,
    value: ::protobuf::SingularPtrField<Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl MVCCValue {
    pub fn new() -> MVCCValue {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static MVCCValue {
        static mut instance: ::protobuf::lazy::Lazy<MVCCValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MVCCValue,
        };
        unsafe {
            instance.get(|| {
                MVCCValue {
                    deleted: ::std::option::Option::None,
                    value: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional bool deleted = 1;

    pub fn clear_deleted(&mut self) {
        self.deleted = ::std::option::Option::None;
    }

    pub fn has_deleted(&self) -> bool {
        self.deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.deleted = ::std::option::Option::Some(v);
    }

    pub fn get_deleted<'a>(&self) -> bool {
        self.deleted.unwrap_or(false)
    }

    // optional .cockroach.proto.Value value = 2;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: Value) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value<'a>(&'a mut self) -> &'a mut Value {
        if self.value.is_none() {
            self.value.set_default();
        };
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> Value {
        self.value.take().unwrap_or_else(|| Value::new())
    }

    pub fn get_value<'a>(&'a self) -> &'a Value {
        self.value.as_ref().unwrap_or_else(|| Value::default_instance())
    }
}

impl ::protobuf::Message for MVCCValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_bool());
                    self.deleted = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.value.set_default();
                    try!(is.merge_message(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.deleted.is_some() {
            my_size += 2;
        };
        for value in self.value.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.deleted {
            try!(os.write_bool(1, v));
        };
        if let Some(v) = self.value.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<MVCCValue>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for MVCCValue {
    fn new() -> MVCCValue {
        MVCCValue::new()
    }

    fn descriptor_static(_: ::std::option::Option<MVCCValue>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "deleted",
                    MVCCValue::has_deleted,
                    MVCCValue::get_deleted,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "value",
                    MVCCValue::has_value,
                    MVCCValue::get_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MVCCValue>(
                    "MVCCValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for MVCCValue {
    fn clear(&mut self) {
        self.clear_deleted();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for MVCCValue {
    fn eq(&self, other: &MVCCValue) -> bool {
        self.deleted == other.deleted &&
        self.value == other.value &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for MVCCValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct KeyValue {
    // message fields
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    value: ::protobuf::SingularPtrField<Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl KeyValue {
    pub fn new() -> KeyValue {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static KeyValue {
        static mut instance: ::protobuf::lazy::Lazy<KeyValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KeyValue,
        };
        unsafe {
            instance.get(|| {
                KeyValue {
                    key: ::protobuf::SingularField::none(),
                    value: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional bytes key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        };
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_key<'a>(&'a self) -> &'a [u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional .cockroach.proto.Value value = 2;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: Value) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value<'a>(&'a mut self) -> &'a mut Value {
        if self.value.is_none() {
            self.value.set_default();
        };
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> Value {
        self.value.take().unwrap_or_else(|| Value::new())
    }

    pub fn get_value<'a>(&'a self) -> &'a Value {
        self.value.as_ref().unwrap_or_else(|| Value::default_instance())
    }
}

impl ::protobuf::Message for KeyValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.key.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.value.set_default();
                    try!(is.merge_message(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.key.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.value.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.key.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        if let Some(v) = self.value.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<KeyValue>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for KeyValue {
    fn new() -> KeyValue {
        KeyValue::new()
    }

    fn descriptor_static(_: ::std::option::Option<KeyValue>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "key",
                    KeyValue::has_key,
                    KeyValue::get_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "value",
                    KeyValue::has_value,
                    KeyValue::get_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<KeyValue>(
                    "KeyValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for KeyValue {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for KeyValue {
    fn eq(&self, other: &KeyValue) -> bool {
        self.key == other.key &&
        self.value == other.value &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for KeyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct RawKeyValue {
    // message fields
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl RawKeyValue {
    pub fn new() -> RawKeyValue {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RawKeyValue {
        static mut instance: ::protobuf::lazy::Lazy<RawKeyValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RawKeyValue,
        };
        unsafe {
            instance.get(|| {
                RawKeyValue {
                    key: ::protobuf::SingularField::none(),
                    value: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional bytes key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        };
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_key<'a>(&'a self) -> &'a [u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes value = 2;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        };
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_value<'a>(&'a self) -> &'a [u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for RawKeyValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.key.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.value.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.key.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.value.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.key.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        if let Some(v) = self.value.as_ref() {
            try!(os.write_bytes(2, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RawKeyValue>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RawKeyValue {
    fn new() -> RawKeyValue {
        RawKeyValue::new()
    }

    fn descriptor_static(_: ::std::option::Option<RawKeyValue>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "key",
                    RawKeyValue::has_key,
                    RawKeyValue::get_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "value",
                    RawKeyValue::has_value,
                    RawKeyValue::get_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RawKeyValue>(
                    "RawKeyValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RawKeyValue {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RawKeyValue {
    fn eq(&self, other: &RawKeyValue) -> bool {
        self.key == other.key &&
        self.value == other.value &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RawKeyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct StoreIdent {
    // message fields
    cluster_id: ::protobuf::SingularField<::std::string::String>,
    node_id: ::std::option::Option<i32>,
    store_id: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl StoreIdent {
    pub fn new() -> StoreIdent {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static StoreIdent {
        static mut instance: ::protobuf::lazy::Lazy<StoreIdent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StoreIdent,
        };
        unsafe {
            instance.get(|| {
                StoreIdent {
                    cluster_id: ::protobuf::SingularField::none(),
                    node_id: ::std::option::Option::None,
                    store_id: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string cluster_id = 1;

    pub fn clear_cluster_id(&mut self) {
        self.cluster_id.clear();
    }

    pub fn has_cluster_id(&self) -> bool {
        self.cluster_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: ::std::string::String) {
        self.cluster_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_id<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.cluster_id.is_none() {
            self.cluster_id.set_default();
        };
        self.cluster_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_cluster_id(&mut self) -> ::std::string::String {
        self.cluster_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_cluster_id<'a>(&'a self) -> &'a str {
        match self.cluster_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional int32 node_id = 2;

    pub fn clear_node_id(&mut self) {
        self.node_id = ::std::option::Option::None;
    }

    pub fn has_node_id(&self) -> bool {
        self.node_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = ::std::option::Option::Some(v);
    }

    pub fn get_node_id<'a>(&self) -> i32 {
        self.node_id.unwrap_or(0)
    }

    // optional int32 store_id = 3;

    pub fn clear_store_id(&mut self) {
        self.store_id = ::std::option::Option::None;
    }

    pub fn has_store_id(&self) -> bool {
        self.store_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_store_id(&mut self, v: i32) {
        self.store_id = ::std::option::Option::Some(v);
    }

    pub fn get_store_id<'a>(&self) -> i32 {
        self.store_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for StoreIdent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.cluster_id.set_default();
                    try!(is.read_string_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.node_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.store_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.cluster_id.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.node_id.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.store_id.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.cluster_id.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.node_id {
            try!(os.write_int32(2, v));
        };
        if let Some(v) = self.store_id {
            try!(os.write_int32(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<StoreIdent>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for StoreIdent {
    fn new() -> StoreIdent {
        StoreIdent::new()
    }

    fn descriptor_static(_: ::std::option::Option<StoreIdent>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "cluster_id",
                    StoreIdent::has_cluster_id,
                    StoreIdent::get_cluster_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "node_id",
                    StoreIdent::has_node_id,
                    StoreIdent::get_node_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "store_id",
                    StoreIdent::has_store_id,
                    StoreIdent::get_store_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StoreIdent>(
                    "StoreIdent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for StoreIdent {
    fn clear(&mut self) {
        self.clear_cluster_id();
        self.clear_node_id();
        self.clear_store_id();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for StoreIdent {
    fn eq(&self, other: &StoreIdent) -> bool {
        self.cluster_id == other.cluster_id &&
        self.node_id == other.node_id &&
        self.store_id == other.store_id &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for StoreIdent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct SplitTrigger {
    // message fields
    updated_desc: ::protobuf::SingularPtrField<RangeDescriptor>,
    new_desc: ::protobuf::SingularPtrField<RangeDescriptor>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl SplitTrigger {
    pub fn new() -> SplitTrigger {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static SplitTrigger {
        static mut instance: ::protobuf::lazy::Lazy<SplitTrigger> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SplitTrigger,
        };
        unsafe {
            instance.get(|| {
                SplitTrigger {
                    updated_desc: ::protobuf::SingularPtrField::none(),
                    new_desc: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .cockroach.proto.RangeDescriptor updated_desc = 1;

    pub fn clear_updated_desc(&mut self) {
        self.updated_desc.clear();
    }

    pub fn has_updated_desc(&self) -> bool {
        self.updated_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_desc(&mut self, v: RangeDescriptor) {
        self.updated_desc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_desc<'a>(&'a mut self) -> &'a mut RangeDescriptor {
        if self.updated_desc.is_none() {
            self.updated_desc.set_default();
        };
        self.updated_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_desc(&mut self) -> RangeDescriptor {
        self.updated_desc.take().unwrap_or_else(|| RangeDescriptor::new())
    }

    pub fn get_updated_desc<'a>(&'a self) -> &'a RangeDescriptor {
        self.updated_desc.as_ref().unwrap_or_else(|| RangeDescriptor::default_instance())
    }

    // optional .cockroach.proto.RangeDescriptor new_desc = 2;

    pub fn clear_new_desc(&mut self) {
        self.new_desc.clear();
    }

    pub fn has_new_desc(&self) -> bool {
        self.new_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_desc(&mut self, v: RangeDescriptor) {
        self.new_desc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_desc<'a>(&'a mut self) -> &'a mut RangeDescriptor {
        if self.new_desc.is_none() {
            self.new_desc.set_default();
        };
        self.new_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_desc(&mut self) -> RangeDescriptor {
        self.new_desc.take().unwrap_or_else(|| RangeDescriptor::new())
    }

    pub fn get_new_desc<'a>(&'a self) -> &'a RangeDescriptor {
        self.new_desc.as_ref().unwrap_or_else(|| RangeDescriptor::default_instance())
    }
}

impl ::protobuf::Message for SplitTrigger {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.updated_desc.set_default();
                    try!(is.merge_message(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.new_desc.set_default();
                    try!(is.merge_message(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.updated_desc.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.new_desc.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.updated_desc.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.new_desc.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<SplitTrigger>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for SplitTrigger {
    fn new() -> SplitTrigger {
        SplitTrigger::new()
    }

    fn descriptor_static(_: ::std::option::Option<SplitTrigger>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "updated_desc",
                    SplitTrigger::has_updated_desc,
                    SplitTrigger::get_updated_desc,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "new_desc",
                    SplitTrigger::has_new_desc,
                    SplitTrigger::get_new_desc,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SplitTrigger>(
                    "SplitTrigger",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for SplitTrigger {
    fn clear(&mut self) {
        self.clear_updated_desc();
        self.clear_new_desc();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for SplitTrigger {
    fn eq(&self, other: &SplitTrigger) -> bool {
        self.updated_desc == other.updated_desc &&
        self.new_desc == other.new_desc &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for SplitTrigger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct MergeTrigger {
    // message fields
    updated_desc: ::protobuf::SingularPtrField<RangeDescriptor>,
    subsumed_raft_id: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl MergeTrigger {
    pub fn new() -> MergeTrigger {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static MergeTrigger {
        static mut instance: ::protobuf::lazy::Lazy<MergeTrigger> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MergeTrigger,
        };
        unsafe {
            instance.get(|| {
                MergeTrigger {
                    updated_desc: ::protobuf::SingularPtrField::none(),
                    subsumed_raft_id: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .cockroach.proto.RangeDescriptor updated_desc = 1;

    pub fn clear_updated_desc(&mut self) {
        self.updated_desc.clear();
    }

    pub fn has_updated_desc(&self) -> bool {
        self.updated_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_desc(&mut self, v: RangeDescriptor) {
        self.updated_desc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_desc<'a>(&'a mut self) -> &'a mut RangeDescriptor {
        if self.updated_desc.is_none() {
            self.updated_desc.set_default();
        };
        self.updated_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_desc(&mut self) -> RangeDescriptor {
        self.updated_desc.take().unwrap_or_else(|| RangeDescriptor::new())
    }

    pub fn get_updated_desc<'a>(&'a self) -> &'a RangeDescriptor {
        self.updated_desc.as_ref().unwrap_or_else(|| RangeDescriptor::default_instance())
    }

    // optional int64 subsumed_raft_id = 2;

    pub fn clear_subsumed_raft_id(&mut self) {
        self.subsumed_raft_id = ::std::option::Option::None;
    }

    pub fn has_subsumed_raft_id(&self) -> bool {
        self.subsumed_raft_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subsumed_raft_id(&mut self, v: i64) {
        self.subsumed_raft_id = ::std::option::Option::Some(v);
    }

    pub fn get_subsumed_raft_id<'a>(&self) -> i64 {
        self.subsumed_raft_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for MergeTrigger {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.updated_desc.set_default();
                    try!(is.merge_message(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.subsumed_raft_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.updated_desc.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.subsumed_raft_id.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.updated_desc.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.subsumed_raft_id {
            try!(os.write_int64(2, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<MergeTrigger>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for MergeTrigger {
    fn new() -> MergeTrigger {
        MergeTrigger::new()
    }

    fn descriptor_static(_: ::std::option::Option<MergeTrigger>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "updated_desc",
                    MergeTrigger::has_updated_desc,
                    MergeTrigger::get_updated_desc,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "subsumed_raft_id",
                    MergeTrigger::has_subsumed_raft_id,
                    MergeTrigger::get_subsumed_raft_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MergeTrigger>(
                    "MergeTrigger",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for MergeTrigger {
    fn clear(&mut self) {
        self.clear_updated_desc();
        self.clear_subsumed_raft_id();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for MergeTrigger {
    fn eq(&self, other: &MergeTrigger) -> bool {
        self.updated_desc == other.updated_desc &&
        self.subsumed_raft_id == other.subsumed_raft_id &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for MergeTrigger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ChangeReplicasTrigger {
    // message fields
    node_id: ::std::option::Option<i32>,
    store_id: ::std::option::Option<i32>,
    change_type: ::std::option::Option<ReplicaChangeType>,
    updated_replicas: ::protobuf::RepeatedField<Replica>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl ChangeReplicasTrigger {
    pub fn new() -> ChangeReplicasTrigger {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ChangeReplicasTrigger {
        static mut instance: ::protobuf::lazy::Lazy<ChangeReplicasTrigger> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChangeReplicasTrigger,
        };
        unsafe {
            instance.get(|| {
                ChangeReplicasTrigger {
                    node_id: ::std::option::Option::None,
                    store_id: ::std::option::Option::None,
                    change_type: ::std::option::Option::None,
                    updated_replicas: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int32 node_id = 1;

    pub fn clear_node_id(&mut self) {
        self.node_id = ::std::option::Option::None;
    }

    pub fn has_node_id(&self) -> bool {
        self.node_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = ::std::option::Option::Some(v);
    }

    pub fn get_node_id<'a>(&self) -> i32 {
        self.node_id.unwrap_or(0)
    }

    // optional int32 store_id = 2;

    pub fn clear_store_id(&mut self) {
        self.store_id = ::std::option::Option::None;
    }

    pub fn has_store_id(&self) -> bool {
        self.store_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_store_id(&mut self, v: i32) {
        self.store_id = ::std::option::Option::Some(v);
    }

    pub fn get_store_id<'a>(&self) -> i32 {
        self.store_id.unwrap_or(0)
    }

    // optional .cockroach.proto.ReplicaChangeType change_type = 3;

    pub fn clear_change_type(&mut self) {
        self.change_type = ::std::option::Option::None;
    }

    pub fn has_change_type(&self) -> bool {
        self.change_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: ReplicaChangeType) {
        self.change_type = ::std::option::Option::Some(v);
    }

    pub fn get_change_type<'a>(&self) -> ReplicaChangeType {
        self.change_type.unwrap_or(ReplicaChangeType::ADD_REPLICA)
    }

    // repeated .cockroach.proto.Replica updated_replicas = 4;

    pub fn clear_updated_replicas(&mut self) {
        self.updated_replicas.clear();
    }

    // Param is passed by value, moved
    pub fn set_updated_replicas(&mut self, v: ::protobuf::RepeatedField<Replica>) {
        self.updated_replicas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updated_replicas<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<Replica> {
        &mut self.updated_replicas
    }

    // Take field
    pub fn take_updated_replicas(&mut self) -> ::protobuf::RepeatedField<Replica> {
        ::std::mem::replace(&mut self.updated_replicas, ::protobuf::RepeatedField::new())
    }

    pub fn get_updated_replicas<'a>(&'a self) -> &'a [Replica] {
        &self.updated_replicas
    }
}

impl ::protobuf::Message for ChangeReplicasTrigger {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.node_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.store_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.change_type = ::std::option::Option::Some(tmp);
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updated_replicas));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.node_id.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.store_id.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.change_type.iter() {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        for value in self.updated_replicas.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.node_id {
            try!(os.write_int32(1, v));
        };
        if let Some(v) = self.store_id {
            try!(os.write_int32(2, v));
        };
        if let Some(v) = self.change_type {
            try!(os.write_enum(3, v as i32));
        };
        for v in self.updated_replicas.iter() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ChangeReplicasTrigger>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ChangeReplicasTrigger {
    fn new() -> ChangeReplicasTrigger {
        ChangeReplicasTrigger::new()
    }

    fn descriptor_static(_: ::std::option::Option<ChangeReplicasTrigger>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "node_id",
                    ChangeReplicasTrigger::has_node_id,
                    ChangeReplicasTrigger::get_node_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "store_id",
                    ChangeReplicasTrigger::has_store_id,
                    ChangeReplicasTrigger::get_store_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "change_type",
                    ChangeReplicasTrigger::has_change_type,
                    ChangeReplicasTrigger::get_change_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "updated_replicas",
                    ChangeReplicasTrigger::get_updated_replicas,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChangeReplicasTrigger>(
                    "ChangeReplicasTrigger",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ChangeReplicasTrigger {
    fn clear(&mut self) {
        self.clear_node_id();
        self.clear_store_id();
        self.clear_change_type();
        self.clear_updated_replicas();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ChangeReplicasTrigger {
    fn eq(&self, other: &ChangeReplicasTrigger) -> bool {
        self.node_id == other.node_id &&
        self.store_id == other.store_id &&
        self.change_type == other.change_type &&
        self.updated_replicas == other.updated_replicas &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ChangeReplicasTrigger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct InternalCommitTrigger {
    // message fields
    split_trigger: ::protobuf::SingularPtrField<SplitTrigger>,
    merge_trigger: ::protobuf::SingularPtrField<MergeTrigger>,
    change_replicas_trigger: ::protobuf::SingularPtrField<ChangeReplicasTrigger>,
    intents: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl InternalCommitTrigger {
    pub fn new() -> InternalCommitTrigger {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static InternalCommitTrigger {
        static mut instance: ::protobuf::lazy::Lazy<InternalCommitTrigger> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InternalCommitTrigger,
        };
        unsafe {
            instance.get(|| {
                InternalCommitTrigger {
                    split_trigger: ::protobuf::SingularPtrField::none(),
                    merge_trigger: ::protobuf::SingularPtrField::none(),
                    change_replicas_trigger: ::protobuf::SingularPtrField::none(),
                    intents: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .cockroach.proto.SplitTrigger split_trigger = 1;

    pub fn clear_split_trigger(&mut self) {
        self.split_trigger.clear();
    }

    pub fn has_split_trigger(&self) -> bool {
        self.split_trigger.is_some()
    }

    // Param is passed by value, moved
    pub fn set_split_trigger(&mut self, v: SplitTrigger) {
        self.split_trigger = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_split_trigger<'a>(&'a mut self) -> &'a mut SplitTrigger {
        if self.split_trigger.is_none() {
            self.split_trigger.set_default();
        };
        self.split_trigger.as_mut().unwrap()
    }

    // Take field
    pub fn take_split_trigger(&mut self) -> SplitTrigger {
        self.split_trigger.take().unwrap_or_else(|| SplitTrigger::new())
    }

    pub fn get_split_trigger<'a>(&'a self) -> &'a SplitTrigger {
        self.split_trigger.as_ref().unwrap_or_else(|| SplitTrigger::default_instance())
    }

    // optional .cockroach.proto.MergeTrigger merge_trigger = 2;

    pub fn clear_merge_trigger(&mut self) {
        self.merge_trigger.clear();
    }

    pub fn has_merge_trigger(&self) -> bool {
        self.merge_trigger.is_some()
    }

    // Param is passed by value, moved
    pub fn set_merge_trigger(&mut self, v: MergeTrigger) {
        self.merge_trigger = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merge_trigger<'a>(&'a mut self) -> &'a mut MergeTrigger {
        if self.merge_trigger.is_none() {
            self.merge_trigger.set_default();
        };
        self.merge_trigger.as_mut().unwrap()
    }

    // Take field
    pub fn take_merge_trigger(&mut self) -> MergeTrigger {
        self.merge_trigger.take().unwrap_or_else(|| MergeTrigger::new())
    }

    pub fn get_merge_trigger<'a>(&'a self) -> &'a MergeTrigger {
        self.merge_trigger.as_ref().unwrap_or_else(|| MergeTrigger::default_instance())
    }

    // optional .cockroach.proto.ChangeReplicasTrigger change_replicas_trigger = 3;

    pub fn clear_change_replicas_trigger(&mut self) {
        self.change_replicas_trigger.clear();
    }

    pub fn has_change_replicas_trigger(&self) -> bool {
        self.change_replicas_trigger.is_some()
    }

    // Param is passed by value, moved
    pub fn set_change_replicas_trigger(&mut self, v: ChangeReplicasTrigger) {
        self.change_replicas_trigger = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_change_replicas_trigger<'a>(&'a mut self) -> &'a mut ChangeReplicasTrigger {
        if self.change_replicas_trigger.is_none() {
            self.change_replicas_trigger.set_default();
        };
        self.change_replicas_trigger.as_mut().unwrap()
    }

    // Take field
    pub fn take_change_replicas_trigger(&mut self) -> ChangeReplicasTrigger {
        self.change_replicas_trigger.take().unwrap_or_else(|| ChangeReplicasTrigger::new())
    }

    pub fn get_change_replicas_trigger<'a>(&'a self) -> &'a ChangeReplicasTrigger {
        self.change_replicas_trigger.as_ref().unwrap_or_else(|| ChangeReplicasTrigger::default_instance())
    }

    // repeated bytes intents = 4;

    pub fn clear_intents(&mut self) {
        self.intents.clear();
    }

    // Param is passed by value, moved
    pub fn set_intents(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.intents = v;
    }

    // Mutable pointer to the field.
    pub fn mut_intents<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.intents
    }

    // Take field
    pub fn take_intents(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.intents, ::protobuf::RepeatedField::new())
    }

    pub fn get_intents<'a>(&'a self) -> &'a [::std::vec::Vec<u8>] {
        &self.intents
    }
}

impl ::protobuf::Message for InternalCommitTrigger {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.split_trigger.set_default();
                    try!(is.merge_message(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.merge_trigger.set_default();
                    try!(is.merge_message(tmp))
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.change_replicas_trigger.set_default();
                    try!(is.merge_message(tmp))
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.intents));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.split_trigger.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.merge_trigger.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.change_replicas_trigger.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.intents.iter() {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.split_trigger.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.merge_trigger.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.change_replicas_trigger.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in self.intents.iter() {
            try!(os.write_bytes(4, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<InternalCommitTrigger>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for InternalCommitTrigger {
    fn new() -> InternalCommitTrigger {
        InternalCommitTrigger::new()
    }

    fn descriptor_static(_: ::std::option::Option<InternalCommitTrigger>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "split_trigger",
                    InternalCommitTrigger::has_split_trigger,
                    InternalCommitTrigger::get_split_trigger,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "merge_trigger",
                    InternalCommitTrigger::has_merge_trigger,
                    InternalCommitTrigger::get_merge_trigger,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "change_replicas_trigger",
                    InternalCommitTrigger::has_change_replicas_trigger,
                    InternalCommitTrigger::get_change_replicas_trigger,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_bytes_accessor(
                    "intents",
                    InternalCommitTrigger::get_intents,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InternalCommitTrigger>(
                    "InternalCommitTrigger",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for InternalCommitTrigger {
    fn clear(&mut self) {
        self.clear_split_trigger();
        self.clear_merge_trigger();
        self.clear_change_replicas_trigger();
        self.clear_intents();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for InternalCommitTrigger {
    fn eq(&self, other: &InternalCommitTrigger) -> bool {
        self.split_trigger == other.split_trigger &&
        self.merge_trigger == other.merge_trigger &&
        self.change_replicas_trigger == other.change_replicas_trigger &&
        self.intents == other.intents &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for InternalCommitTrigger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct NodeList {
    // message fields
    nodes: ::std::vec::Vec<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl NodeList {
    pub fn new() -> NodeList {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static NodeList {
        static mut instance: ::protobuf::lazy::Lazy<NodeList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeList,
        };
        unsafe {
            instance.get(|| {
                NodeList {
                    nodes: ::std::vec::Vec::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // repeated int32 nodes = 1;

    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::std::vec::Vec<i32>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<i32> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.nodes, ::std::vec::Vec::new())
    }

    pub fn get_nodes<'a>(&'a self) -> &'a [i32] {
        &self.nodes
    }
}

impl ::protobuf::Message for NodeList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.nodes));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.nodes.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(1, &self.nodes);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.nodes.is_empty() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            // TODO: Data size is computed again, it should be cached
            try!(os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.nodes)));
            for v in self.nodes.iter() {
                try!(os.write_int32_no_tag(*v));
            };
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<NodeList>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for NodeList {
    fn new() -> NodeList {
        NodeList::new()
    }

    fn descriptor_static(_: ::std::option::Option<NodeList>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_i32_accessor(
                    "nodes",
                    NodeList::get_nodes,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeList>(
                    "NodeList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for NodeList {
    fn clear(&mut self) {
        self.clear_nodes();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for NodeList {
    fn eq(&self, other: &NodeList) -> bool {
        self.nodes == other.nodes &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for NodeList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Transaction {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    priority: ::std::option::Option<i32>,
    isolation: ::std::option::Option<IsolationType>,
    status: ::std::option::Option<TransactionStatus>,
    epoch: ::std::option::Option<i32>,
    last_heartbeat: ::protobuf::SingularPtrField<Timestamp>,
    timestamp: ::protobuf::SingularPtrField<Timestamp>,
    orig_timestamp: ::protobuf::SingularPtrField<Timestamp>,
    max_timestamp: ::protobuf::SingularPtrField<Timestamp>,
    certain_nodes: ::protobuf::SingularPtrField<NodeList>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Transaction {
        static mut instance: ::protobuf::lazy::Lazy<Transaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Transaction,
        };
        unsafe {
            instance.get(|| {
                Transaction {
                    name: ::protobuf::SingularField::none(),
                    key: ::protobuf::SingularField::none(),
                    id: ::protobuf::SingularField::none(),
                    priority: ::std::option::Option::None,
                    isolation: ::std::option::Option::None,
                    status: ::std::option::Option::None,
                    epoch: ::std::option::Option::None,
                    last_heartbeat: ::protobuf::SingularPtrField::none(),
                    timestamp: ::protobuf::SingularPtrField::none(),
                    orig_timestamp: ::protobuf::SingularPtrField::none(),
                    max_timestamp: ::protobuf::SingularPtrField::none(),
                    certain_nodes: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name<'a>(&'a self) -> &'a str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bytes key = 2;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        };
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_key<'a>(&'a self) -> &'a [u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes id = 3;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.id.is_none() {
            self.id.set_default();
        };
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        self.id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_id<'a>(&'a self) -> &'a [u8] {
        match self.id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional int32 priority = 4;

    pub fn clear_priority(&mut self) {
        self.priority = ::std::option::Option::None;
    }

    pub fn has_priority(&self) -> bool {
        self.priority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: i32) {
        self.priority = ::std::option::Option::Some(v);
    }

    pub fn get_priority<'a>(&self) -> i32 {
        self.priority.unwrap_or(0)
    }

    // optional .cockroach.proto.IsolationType isolation = 5;

    pub fn clear_isolation(&mut self) {
        self.isolation = ::std::option::Option::None;
    }

    pub fn has_isolation(&self) -> bool {
        self.isolation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isolation(&mut self, v: IsolationType) {
        self.isolation = ::std::option::Option::Some(v);
    }

    pub fn get_isolation<'a>(&self) -> IsolationType {
        self.isolation.unwrap_or(IsolationType::SERIALIZABLE)
    }

    // optional .cockroach.proto.TransactionStatus status = 6;

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TransactionStatus) {
        self.status = ::std::option::Option::Some(v);
    }

    pub fn get_status<'a>(&self) -> TransactionStatus {
        self.status.unwrap_or(TransactionStatus::PENDING)
    }

    // optional int32 epoch = 7;

    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: i32) {
        self.epoch = ::std::option::Option::Some(v);
    }

    pub fn get_epoch<'a>(&self) -> i32 {
        self.epoch.unwrap_or(0)
    }

    // optional .cockroach.proto.Timestamp last_heartbeat = 8;

    pub fn clear_last_heartbeat(&mut self) {
        self.last_heartbeat.clear();
    }

    pub fn has_last_heartbeat(&self) -> bool {
        self.last_heartbeat.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_heartbeat(&mut self, v: Timestamp) {
        self.last_heartbeat = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_heartbeat<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.last_heartbeat.is_none() {
            self.last_heartbeat.set_default();
        };
        self.last_heartbeat.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_heartbeat(&mut self) -> Timestamp {
        self.last_heartbeat.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_last_heartbeat<'a>(&'a self) -> &'a Timestamp {
        self.last_heartbeat.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional .cockroach.proto.Timestamp timestamp = 9;

    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        };
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> Timestamp {
        self.timestamp.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_timestamp<'a>(&'a self) -> &'a Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional .cockroach.proto.Timestamp orig_timestamp = 10;

    pub fn clear_orig_timestamp(&mut self) {
        self.orig_timestamp.clear();
    }

    pub fn has_orig_timestamp(&self) -> bool {
        self.orig_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orig_timestamp(&mut self, v: Timestamp) {
        self.orig_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orig_timestamp<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.orig_timestamp.is_none() {
            self.orig_timestamp.set_default();
        };
        self.orig_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_orig_timestamp(&mut self) -> Timestamp {
        self.orig_timestamp.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_orig_timestamp<'a>(&'a self) -> &'a Timestamp {
        self.orig_timestamp.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional .cockroach.proto.Timestamp max_timestamp = 11;

    pub fn clear_max_timestamp(&mut self) {
        self.max_timestamp.clear();
    }

    pub fn has_max_timestamp(&self) -> bool {
        self.max_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_timestamp(&mut self, v: Timestamp) {
        self.max_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_timestamp<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.max_timestamp.is_none() {
            self.max_timestamp.set_default();
        };
        self.max_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_timestamp(&mut self) -> Timestamp {
        self.max_timestamp.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_max_timestamp<'a>(&'a self) -> &'a Timestamp {
        self.max_timestamp.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional .cockroach.proto.NodeList certain_nodes = 12;

    pub fn clear_certain_nodes(&mut self) {
        self.certain_nodes.clear();
    }

    pub fn has_certain_nodes(&self) -> bool {
        self.certain_nodes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certain_nodes(&mut self, v: NodeList) {
        self.certain_nodes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certain_nodes<'a>(&'a mut self) -> &'a mut NodeList {
        if self.certain_nodes.is_none() {
            self.certain_nodes.set_default();
        };
        self.certain_nodes.as_mut().unwrap()
    }

    // Take field
    pub fn take_certain_nodes(&mut self) -> NodeList {
        self.certain_nodes.take().unwrap_or_else(|| NodeList::new())
    }

    pub fn get_certain_nodes<'a>(&'a self) -> &'a NodeList {
        self.certain_nodes.as_ref().unwrap_or_else(|| NodeList::default_instance())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.name.set_default();
                    try!(is.read_string_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.key.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.id.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.priority = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.isolation = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.status = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.last_heartbeat.set_default();
                    try!(is.merge_message(tmp))
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.timestamp.set_default();
                    try!(is.merge_message(tmp))
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.orig_timestamp.set_default();
                    try!(is.merge_message(tmp))
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.max_timestamp.set_default();
                    try!(is.merge_message(tmp))
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.certain_nodes.set_default();
                    try!(is.merge_message(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.name.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.key.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in self.id.iter() {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        for value in self.priority.iter() {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.isolation.iter() {
            my_size += ::protobuf::rt::enum_size(5, *value);
        };
        for value in self.status.iter() {
            my_size += ::protobuf::rt::enum_size(6, *value);
        };
        for value in self.epoch.iter() {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.last_heartbeat.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.timestamp.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.orig_timestamp.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.max_timestamp.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.certain_nodes.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.key.as_ref() {
            try!(os.write_bytes(2, &v));
        };
        if let Some(v) = self.id.as_ref() {
            try!(os.write_bytes(3, &v));
        };
        if let Some(v) = self.priority {
            try!(os.write_int32(4, v));
        };
        if let Some(v) = self.isolation {
            try!(os.write_enum(5, v as i32));
        };
        if let Some(v) = self.status {
            try!(os.write_enum(6, v as i32));
        };
        if let Some(v) = self.epoch {
            try!(os.write_int32(7, v));
        };
        if let Some(v) = self.last_heartbeat.as_ref() {
            try!(os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.timestamp.as_ref() {
            try!(os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.orig_timestamp.as_ref() {
            try!(os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.max_timestamp.as_ref() {
            try!(os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.certain_nodes.as_ref() {
            try!(os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Transaction>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Transaction {
    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static(_: ::std::option::Option<Transaction>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    Transaction::has_name,
                    Transaction::get_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "key",
                    Transaction::has_key,
                    Transaction::get_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "id",
                    Transaction::has_id,
                    Transaction::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "priority",
                    Transaction::has_priority,
                    Transaction::get_priority,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "isolation",
                    Transaction::has_isolation,
                    Transaction::get_isolation,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "status",
                    Transaction::has_status,
                    Transaction::get_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "epoch",
                    Transaction::has_epoch,
                    Transaction::get_epoch,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "last_heartbeat",
                    Transaction::has_last_heartbeat,
                    Transaction::get_last_heartbeat,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "timestamp",
                    Transaction::has_timestamp,
                    Transaction::get_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "orig_timestamp",
                    Transaction::has_orig_timestamp,
                    Transaction::get_orig_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "max_timestamp",
                    Transaction::has_max_timestamp,
                    Transaction::get_max_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "certain_nodes",
                    Transaction::has_certain_nodes,
                    Transaction::get_certain_nodes,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Transaction>(
                    "Transaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_key();
        self.clear_id();
        self.clear_priority();
        self.clear_isolation();
        self.clear_status();
        self.clear_epoch();
        self.clear_last_heartbeat();
        self.clear_timestamp();
        self.clear_orig_timestamp();
        self.clear_max_timestamp();
        self.clear_certain_nodes();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Transaction {
    fn eq(&self, other: &Transaction) -> bool {
        self.name == other.name &&
        self.key == other.key &&
        self.id == other.id &&
        self.priority == other.priority &&
        self.isolation == other.isolation &&
        self.status == other.status &&
        self.epoch == other.epoch &&
        self.last_heartbeat == other.last_heartbeat &&
        self.timestamp == other.timestamp &&
        self.orig_timestamp == other.orig_timestamp &&
        self.max_timestamp == other.max_timestamp &&
        self.certain_nodes == other.certain_nodes &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Lease {
    // message fields
    start: ::protobuf::SingularPtrField<Timestamp>,
    expiration: ::protobuf::SingularPtrField<Timestamp>,
    raft_node_id: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Lease {
    pub fn new() -> Lease {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Lease {
        static mut instance: ::protobuf::lazy::Lazy<Lease> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Lease,
        };
        unsafe {
            instance.get(|| {
                Lease {
                    start: ::protobuf::SingularPtrField::none(),
                    expiration: ::protobuf::SingularPtrField::none(),
                    raft_node_id: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .cockroach.proto.Timestamp start = 1;

    pub fn clear_start(&mut self) {
        self.start.clear();
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: Timestamp) {
        self.start = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.start.is_none() {
            self.start.set_default();
        };
        self.start.as_mut().unwrap()
    }

    // Take field
    pub fn take_start(&mut self) -> Timestamp {
        self.start.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_start<'a>(&'a self) -> &'a Timestamp {
        self.start.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional .cockroach.proto.Timestamp expiration = 2;

    pub fn clear_expiration(&mut self) {
        self.expiration.clear();
    }

    pub fn has_expiration(&self) -> bool {
        self.expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiration(&mut self, v: Timestamp) {
        self.expiration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expiration<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.expiration.is_none() {
            self.expiration.set_default();
        };
        self.expiration.as_mut().unwrap()
    }

    // Take field
    pub fn take_expiration(&mut self) -> Timestamp {
        self.expiration.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_expiration<'a>(&'a self) -> &'a Timestamp {
        self.expiration.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional uint64 raft_node_id = 3;

    pub fn clear_raft_node_id(&mut self) {
        self.raft_node_id = ::std::option::Option::None;
    }

    pub fn has_raft_node_id(&self) -> bool {
        self.raft_node_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raft_node_id(&mut self, v: u64) {
        self.raft_node_id = ::std::option::Option::Some(v);
    }

    pub fn get_raft_node_id<'a>(&self) -> u64 {
        self.raft_node_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for Lease {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.start.set_default();
                    try!(is.merge_message(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.expiration.set_default();
                    try!(is.merge_message(tmp))
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_uint64());
                    self.raft_node_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.start.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.expiration.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.raft_node_id.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.start.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.expiration.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.raft_node_id {
            try!(os.write_uint64(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Lease>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Lease {
    fn new() -> Lease {
        Lease::new()
    }

    fn descriptor_static(_: ::std::option::Option<Lease>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "start",
                    Lease::has_start,
                    Lease::get_start,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "expiration",
                    Lease::has_expiration,
                    Lease::get_expiration,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "raft_node_id",
                    Lease::has_raft_node_id,
                    Lease::get_raft_node_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Lease>(
                    "Lease",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Lease {
    fn clear(&mut self) {
        self.clear_start();
        self.clear_expiration();
        self.clear_raft_node_id();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Lease {
    fn eq(&self, other: &Lease) -> bool {
        self.start == other.start &&
        self.expiration == other.expiration &&
        self.raft_node_id == other.raft_node_id &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Lease {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct MVCCMetadata {
    // message fields
    txn: ::protobuf::SingularPtrField<Transaction>,
    timestamp: ::protobuf::SingularPtrField<Timestamp>,
    deleted: ::std::option::Option<bool>,
    key_bytes: ::std::option::Option<i64>,
    val_bytes: ::std::option::Option<i64>,
    value: ::protobuf::SingularPtrField<Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl MVCCMetadata {
    pub fn new() -> MVCCMetadata {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static MVCCMetadata {
        static mut instance: ::protobuf::lazy::Lazy<MVCCMetadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MVCCMetadata,
        };
        unsafe {
            instance.get(|| {
                MVCCMetadata {
                    txn: ::protobuf::SingularPtrField::none(),
                    timestamp: ::protobuf::SingularPtrField::none(),
                    deleted: ::std::option::Option::None,
                    key_bytes: ::std::option::Option::None,
                    val_bytes: ::std::option::Option::None,
                    value: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .cockroach.proto.Transaction txn = 1;

    pub fn clear_txn(&mut self) {
        self.txn.clear();
    }

    pub fn has_txn(&self) -> bool {
        self.txn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txn(&mut self, v: Transaction) {
        self.txn = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn<'a>(&'a mut self) -> &'a mut Transaction {
        if self.txn.is_none() {
            self.txn.set_default();
        };
        self.txn.as_mut().unwrap()
    }

    // Take field
    pub fn take_txn(&mut self) -> Transaction {
        self.txn.take().unwrap_or_else(|| Transaction::new())
    }

    pub fn get_txn<'a>(&'a self) -> &'a Transaction {
        self.txn.as_ref().unwrap_or_else(|| Transaction::default_instance())
    }

    // optional .cockroach.proto.Timestamp timestamp = 2;

    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp<'a>(&'a mut self) -> &'a mut Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        };
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> Timestamp {
        self.timestamp.take().unwrap_or_else(|| Timestamp::new())
    }

    pub fn get_timestamp<'a>(&'a self) -> &'a Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| Timestamp::default_instance())
    }

    // optional bool deleted = 3;

    pub fn clear_deleted(&mut self) {
        self.deleted = ::std::option::Option::None;
    }

    pub fn has_deleted(&self) -> bool {
        self.deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.deleted = ::std::option::Option::Some(v);
    }

    pub fn get_deleted<'a>(&self) -> bool {
        self.deleted.unwrap_or(false)
    }

    // optional int64 key_bytes = 4;

    pub fn clear_key_bytes(&mut self) {
        self.key_bytes = ::std::option::Option::None;
    }

    pub fn has_key_bytes(&self) -> bool {
        self.key_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_bytes(&mut self, v: i64) {
        self.key_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_key_bytes<'a>(&self) -> i64 {
        self.key_bytes.unwrap_or(0)
    }

    // optional int64 val_bytes = 5;

    pub fn clear_val_bytes(&mut self) {
        self.val_bytes = ::std::option::Option::None;
    }

    pub fn has_val_bytes(&self) -> bool {
        self.val_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_val_bytes(&mut self, v: i64) {
        self.val_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_val_bytes<'a>(&self) -> i64 {
        self.val_bytes.unwrap_or(0)
    }

    // optional .cockroach.proto.Value value = 6;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: Value) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value<'a>(&'a mut self) -> &'a mut Value {
        if self.value.is_none() {
            self.value.set_default();
        };
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> Value {
        self.value.take().unwrap_or_else(|| Value::new())
    }

    pub fn get_value<'a>(&'a self) -> &'a Value {
        self.value.as_ref().unwrap_or_else(|| Value::default_instance())
    }
}

impl ::protobuf::Message for MVCCMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.txn.set_default();
                    try!(is.merge_message(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.timestamp.set_default();
                    try!(is.merge_message(tmp))
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_bool());
                    self.deleted = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.key_bytes = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.val_bytes = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.value.set_default();
                    try!(is.merge_message(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.txn.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.timestamp.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.deleted.is_some() {
            my_size += 2;
        };
        for value in self.key_bytes.iter() {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.val_bytes.iter() {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.value.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.txn.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.timestamp.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.deleted {
            try!(os.write_bool(3, v));
        };
        if let Some(v) = self.key_bytes {
            try!(os.write_int64(4, v));
        };
        if let Some(v) = self.val_bytes {
            try!(os.write_int64(5, v));
        };
        if let Some(v) = self.value.as_ref() {
            try!(os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<MVCCMetadata>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for MVCCMetadata {
    fn new() -> MVCCMetadata {
        MVCCMetadata::new()
    }

    fn descriptor_static(_: ::std::option::Option<MVCCMetadata>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "txn",
                    MVCCMetadata::has_txn,
                    MVCCMetadata::get_txn,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "timestamp",
                    MVCCMetadata::has_timestamp,
                    MVCCMetadata::get_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "deleted",
                    MVCCMetadata::has_deleted,
                    MVCCMetadata::get_deleted,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "key_bytes",
                    MVCCMetadata::has_key_bytes,
                    MVCCMetadata::get_key_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "val_bytes",
                    MVCCMetadata::has_val_bytes,
                    MVCCMetadata::get_val_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "value",
                    MVCCMetadata::has_value,
                    MVCCMetadata::get_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MVCCMetadata>(
                    "MVCCMetadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for MVCCMetadata {
    fn clear(&mut self) {
        self.clear_txn();
        self.clear_timestamp();
        self.clear_deleted();
        self.clear_key_bytes();
        self.clear_val_bytes();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for MVCCMetadata {
    fn eq(&self, other: &MVCCMetadata) -> bool {
        self.txn == other.txn &&
        self.timestamp == other.timestamp &&
        self.deleted == other.deleted &&
        self.key_bytes == other.key_bytes &&
        self.val_bytes == other.val_bytes &&
        self.value == other.value &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for MVCCMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct GCMetadata {
    // message fields
    last_scan_nanos: ::std::option::Option<i64>,
    oldest_intent_nanos: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl GCMetadata {
    pub fn new() -> GCMetadata {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static GCMetadata {
        static mut instance: ::protobuf::lazy::Lazy<GCMetadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GCMetadata,
        };
        unsafe {
            instance.get(|| {
                GCMetadata {
                    last_scan_nanos: ::std::option::Option::None,
                    oldest_intent_nanos: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 last_scan_nanos = 1;

    pub fn clear_last_scan_nanos(&mut self) {
        self.last_scan_nanos = ::std::option::Option::None;
    }

    pub fn has_last_scan_nanos(&self) -> bool {
        self.last_scan_nanos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_scan_nanos(&mut self, v: i64) {
        self.last_scan_nanos = ::std::option::Option::Some(v);
    }

    pub fn get_last_scan_nanos<'a>(&self) -> i64 {
        self.last_scan_nanos.unwrap_or(0)
    }

    // optional int64 oldest_intent_nanos = 2;

    pub fn clear_oldest_intent_nanos(&mut self) {
        self.oldest_intent_nanos = ::std::option::Option::None;
    }

    pub fn has_oldest_intent_nanos(&self) -> bool {
        self.oldest_intent_nanos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_oldest_intent_nanos(&mut self, v: i64) {
        self.oldest_intent_nanos = ::std::option::Option::Some(v);
    }

    pub fn get_oldest_intent_nanos<'a>(&self) -> i64 {
        self.oldest_intent_nanos.unwrap_or(0)
    }
}

impl ::protobuf::Message for GCMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.last_scan_nanos = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.oldest_intent_nanos = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.last_scan_nanos.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.oldest_intent_nanos.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.last_scan_nanos {
            try!(os.write_int64(1, v));
        };
        if let Some(v) = self.oldest_intent_nanos {
            try!(os.write_int64(2, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<GCMetadata>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for GCMetadata {
    fn new() -> GCMetadata {
        GCMetadata::new()
    }

    fn descriptor_static(_: ::std::option::Option<GCMetadata>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "last_scan_nanos",
                    GCMetadata::has_last_scan_nanos,
                    GCMetadata::get_last_scan_nanos,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "oldest_intent_nanos",
                    GCMetadata::has_oldest_intent_nanos,
                    GCMetadata::get_oldest_intent_nanos,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GCMetadata>(
                    "GCMetadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for GCMetadata {
    fn clear(&mut self) {
        self.clear_last_scan_nanos();
        self.clear_oldest_intent_nanos();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for GCMetadata {
    fn eq(&self, other: &GCMetadata) -> bool {
        self.last_scan_nanos == other.last_scan_nanos &&
        self.oldest_intent_nanos == other.oldest_intent_nanos &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for GCMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TimeSeriesDatapoint {
    // message fields
    timestamp_nanos: ::std::option::Option<i64>,
    int_value: ::std::option::Option<i64>,
    float_value: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesDatapoint {
    pub fn new() -> TimeSeriesDatapoint {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesDatapoint {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesDatapoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesDatapoint,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesDatapoint {
                    timestamp_nanos: ::std::option::Option::None,
                    int_value: ::std::option::Option::None,
                    float_value: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 timestamp_nanos = 1;

    pub fn clear_timestamp_nanos(&mut self) {
        self.timestamp_nanos = ::std::option::Option::None;
    }

    pub fn has_timestamp_nanos(&self) -> bool {
        self.timestamp_nanos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_nanos(&mut self, v: i64) {
        self.timestamp_nanos = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp_nanos<'a>(&self) -> i64 {
        self.timestamp_nanos.unwrap_or(0)
    }

    // optional int64 int_value = 2;

    pub fn clear_int_value(&mut self) {
        self.int_value = ::std::option::Option::None;
    }

    pub fn has_int_value(&self) -> bool {
        self.int_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_int_value(&mut self, v: i64) {
        self.int_value = ::std::option::Option::Some(v);
    }

    pub fn get_int_value<'a>(&self) -> i64 {
        self.int_value.unwrap_or(0)
    }

    // optional float float_value = 3;

    pub fn clear_float_value(&mut self) {
        self.float_value = ::std::option::Option::None;
    }

    pub fn has_float_value(&self) -> bool {
        self.float_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_float_value(&mut self, v: f32) {
        self.float_value = ::std::option::Option::Some(v);
    }

    pub fn get_float_value<'a>(&self) -> f32 {
        self.float_value.unwrap_or(0.)
    }
}

impl ::protobuf::Message for TimeSeriesDatapoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.timestamp_nanos = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.int_value = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_float());
                    self.float_value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.timestamp_nanos.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.int_value.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.float_value.is_some() {
            my_size += 5;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timestamp_nanos {
            try!(os.write_int64(1, v));
        };
        if let Some(v) = self.int_value {
            try!(os.write_int64(2, v));
        };
        if let Some(v) = self.float_value {
            try!(os.write_float(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesDatapoint>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesDatapoint {
    fn new() -> TimeSeriesDatapoint {
        TimeSeriesDatapoint::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesDatapoint>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "timestamp_nanos",
                    TimeSeriesDatapoint::has_timestamp_nanos,
                    TimeSeriesDatapoint::get_timestamp_nanos,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "int_value",
                    TimeSeriesDatapoint::has_int_value,
                    TimeSeriesDatapoint::get_int_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "float_value",
                    TimeSeriesDatapoint::has_float_value,
                    TimeSeriesDatapoint::get_float_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesDatapoint>(
                    "TimeSeriesDatapoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesDatapoint {
    fn clear(&mut self) {
        self.clear_timestamp_nanos();
        self.clear_int_value();
        self.clear_float_value();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesDatapoint {
    fn eq(&self, other: &TimeSeriesDatapoint) -> bool {
        self.timestamp_nanos == other.timestamp_nanos &&
        self.int_value == other.int_value &&
        self.float_value == other.float_value &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesDatapoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TimeSeriesData {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    source: ::protobuf::SingularField<::std::string::String>,
    datapoints: ::protobuf::RepeatedField<TimeSeriesDatapoint>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesData {
    pub fn new() -> TimeSeriesData {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesData {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesData,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesData {
                    name: ::protobuf::SingularField::none(),
                    source: ::protobuf::SingularField::none(),
                    datapoints: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name<'a>(&'a self) -> &'a str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string source = 2;

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.source.is_none() {
            self.source.set_default();
        };
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        self.source.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_source<'a>(&'a self) -> &'a str {
        match self.source.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;

    pub fn clear_datapoints(&mut self) {
        self.datapoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_datapoints(&mut self, v: ::protobuf::RepeatedField<TimeSeriesDatapoint>) {
        self.datapoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_datapoints<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<TimeSeriesDatapoint> {
        &mut self.datapoints
    }

    // Take field
    pub fn take_datapoints(&mut self) -> ::protobuf::RepeatedField<TimeSeriesDatapoint> {
        ::std::mem::replace(&mut self.datapoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_datapoints<'a>(&'a self) -> &'a [TimeSeriesDatapoint] {
        &self.datapoints
    }
}

impl ::protobuf::Message for TimeSeriesData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.name.set_default();
                    try!(is.read_string_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.source.set_default();
                    try!(is.read_string_into(tmp))
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.datapoints));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.name.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.source.iter() {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in self.datapoints.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.source.as_ref() {
            try!(os.write_string(2, &v));
        };
        for v in self.datapoints.iter() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesData>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesData {
    fn new() -> TimeSeriesData {
        TimeSeriesData::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesData>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    TimeSeriesData::has_name,
                    TimeSeriesData::get_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "source",
                    TimeSeriesData::has_source,
                    TimeSeriesData::get_source,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "datapoints",
                    TimeSeriesData::get_datapoints,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesData>(
                    "TimeSeriesData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesData {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_source();
        self.clear_datapoints();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesData {
    fn eq(&self, other: &TimeSeriesData) -> bool {
        self.name == other.name &&
        self.source == other.source &&
        self.datapoints == other.datapoints &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct MVCCStats {
    // message fields
    live_bytes: ::std::option::Option<i64>,
    key_bytes: ::std::option::Option<i64>,
    val_bytes: ::std::option::Option<i64>,
    intent_bytes: ::std::option::Option<i64>,
    live_count: ::std::option::Option<i64>,
    key_count: ::std::option::Option<i64>,
    val_count: ::std::option::Option<i64>,
    intent_count: ::std::option::Option<i64>,
    intent_age: ::std::option::Option<i64>,
    gc_bytes_age: ::std::option::Option<i64>,
    last_update_nanos: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl MVCCStats {
    pub fn new() -> MVCCStats {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static MVCCStats {
        static mut instance: ::protobuf::lazy::Lazy<MVCCStats> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MVCCStats,
        };
        unsafe {
            instance.get(|| {
                MVCCStats {
                    live_bytes: ::std::option::Option::None,
                    key_bytes: ::std::option::Option::None,
                    val_bytes: ::std::option::Option::None,
                    intent_bytes: ::std::option::Option::None,
                    live_count: ::std::option::Option::None,
                    key_count: ::std::option::Option::None,
                    val_count: ::std::option::Option::None,
                    intent_count: ::std::option::Option::None,
                    intent_age: ::std::option::Option::None,
                    gc_bytes_age: ::std::option::Option::None,
                    last_update_nanos: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 live_bytes = 1;

    pub fn clear_live_bytes(&mut self) {
        self.live_bytes = ::std::option::Option::None;
    }

    pub fn has_live_bytes(&self) -> bool {
        self.live_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_live_bytes(&mut self, v: i64) {
        self.live_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_live_bytes<'a>(&self) -> i64 {
        self.live_bytes.unwrap_or(0)
    }

    // optional int64 key_bytes = 2;

    pub fn clear_key_bytes(&mut self) {
        self.key_bytes = ::std::option::Option::None;
    }

    pub fn has_key_bytes(&self) -> bool {
        self.key_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_bytes(&mut self, v: i64) {
        self.key_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_key_bytes<'a>(&self) -> i64 {
        self.key_bytes.unwrap_or(0)
    }

    // optional int64 val_bytes = 3;

    pub fn clear_val_bytes(&mut self) {
        self.val_bytes = ::std::option::Option::None;
    }

    pub fn has_val_bytes(&self) -> bool {
        self.val_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_val_bytes(&mut self, v: i64) {
        self.val_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_val_bytes<'a>(&self) -> i64 {
        self.val_bytes.unwrap_or(0)
    }

    // optional int64 intent_bytes = 4;

    pub fn clear_intent_bytes(&mut self) {
        self.intent_bytes = ::std::option::Option::None;
    }

    pub fn has_intent_bytes(&self) -> bool {
        self.intent_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_intent_bytes(&mut self, v: i64) {
        self.intent_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_intent_bytes<'a>(&self) -> i64 {
        self.intent_bytes.unwrap_or(0)
    }

    // optional int64 live_count = 5;

    pub fn clear_live_count(&mut self) {
        self.live_count = ::std::option::Option::None;
    }

    pub fn has_live_count(&self) -> bool {
        self.live_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_live_count(&mut self, v: i64) {
        self.live_count = ::std::option::Option::Some(v);
    }

    pub fn get_live_count<'a>(&self) -> i64 {
        self.live_count.unwrap_or(0)
    }

    // optional int64 key_count = 6;

    pub fn clear_key_count(&mut self) {
        self.key_count = ::std::option::Option::None;
    }

    pub fn has_key_count(&self) -> bool {
        self.key_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_count(&mut self, v: i64) {
        self.key_count = ::std::option::Option::Some(v);
    }

    pub fn get_key_count<'a>(&self) -> i64 {
        self.key_count.unwrap_or(0)
    }

    // optional int64 val_count = 7;

    pub fn clear_val_count(&mut self) {
        self.val_count = ::std::option::Option::None;
    }

    pub fn has_val_count(&self) -> bool {
        self.val_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_val_count(&mut self, v: i64) {
        self.val_count = ::std::option::Option::Some(v);
    }

    pub fn get_val_count<'a>(&self) -> i64 {
        self.val_count.unwrap_or(0)
    }

    // optional int64 intent_count = 8;

    pub fn clear_intent_count(&mut self) {
        self.intent_count = ::std::option::Option::None;
    }

    pub fn has_intent_count(&self) -> bool {
        self.intent_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_intent_count(&mut self, v: i64) {
        self.intent_count = ::std::option::Option::Some(v);
    }

    pub fn get_intent_count<'a>(&self) -> i64 {
        self.intent_count.unwrap_or(0)
    }

    // optional int64 intent_age = 9;

    pub fn clear_intent_age(&mut self) {
        self.intent_age = ::std::option::Option::None;
    }

    pub fn has_intent_age(&self) -> bool {
        self.intent_age.is_some()
    }

    // Param is passed by value, moved
    pub fn set_intent_age(&mut self, v: i64) {
        self.intent_age = ::std::option::Option::Some(v);
    }

    pub fn get_intent_age<'a>(&self) -> i64 {
        self.intent_age.unwrap_or(0)
    }

    // optional int64 gc_bytes_age = 10;

    pub fn clear_gc_bytes_age(&mut self) {
        self.gc_bytes_age = ::std::option::Option::None;
    }

    pub fn has_gc_bytes_age(&self) -> bool {
        self.gc_bytes_age.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_bytes_age(&mut self, v: i64) {
        self.gc_bytes_age = ::std::option::Option::Some(v);
    }

    pub fn get_gc_bytes_age<'a>(&self) -> i64 {
        self.gc_bytes_age.unwrap_or(0)
    }

    // optional int64 last_update_nanos = 11;

    pub fn clear_last_update_nanos(&mut self) {
        self.last_update_nanos = ::std::option::Option::None;
    }

    pub fn has_last_update_nanos(&self) -> bool {
        self.last_update_nanos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_update_nanos(&mut self, v: i64) {
        self.last_update_nanos = ::std::option::Option::Some(v);
    }

    pub fn get_last_update_nanos<'a>(&self) -> i64 {
        self.last_update_nanos.unwrap_or(0)
    }
}

impl ::protobuf::Message for MVCCStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.live_bytes = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.key_bytes = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.val_bytes = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.intent_bytes = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.live_count = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.key_count = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.val_count = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.intent_count = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.intent_age = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.gc_bytes_age = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.last_update_nanos = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.live_bytes.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.key_bytes.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.val_bytes.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.intent_bytes.iter() {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.live_count.iter() {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.key_count.iter() {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.val_count.iter() {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.intent_count.iter() {
            my_size += ::protobuf::rt::value_size(8, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.intent_age.iter() {
            my_size += ::protobuf::rt::value_size(9, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.gc_bytes_age.iter() {
            my_size += ::protobuf::rt::value_size(10, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.last_update_nanos.iter() {
            my_size += ::protobuf::rt::value_size(11, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.live_bytes {
            try!(os.write_int64(1, v));
        };
        if let Some(v) = self.key_bytes {
            try!(os.write_int64(2, v));
        };
        if let Some(v) = self.val_bytes {
            try!(os.write_int64(3, v));
        };
        if let Some(v) = self.intent_bytes {
            try!(os.write_int64(4, v));
        };
        if let Some(v) = self.live_count {
            try!(os.write_int64(5, v));
        };
        if let Some(v) = self.key_count {
            try!(os.write_int64(6, v));
        };
        if let Some(v) = self.val_count {
            try!(os.write_int64(7, v));
        };
        if let Some(v) = self.intent_count {
            try!(os.write_int64(8, v));
        };
        if let Some(v) = self.intent_age {
            try!(os.write_int64(9, v));
        };
        if let Some(v) = self.gc_bytes_age {
            try!(os.write_int64(10, v));
        };
        if let Some(v) = self.last_update_nanos {
            try!(os.write_int64(11, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<MVCCStats>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for MVCCStats {
    fn new() -> MVCCStats {
        MVCCStats::new()
    }

    fn descriptor_static(_: ::std::option::Option<MVCCStats>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "live_bytes",
                    MVCCStats::has_live_bytes,
                    MVCCStats::get_live_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "key_bytes",
                    MVCCStats::has_key_bytes,
                    MVCCStats::get_key_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "val_bytes",
                    MVCCStats::has_val_bytes,
                    MVCCStats::get_val_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "intent_bytes",
                    MVCCStats::has_intent_bytes,
                    MVCCStats::get_intent_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "live_count",
                    MVCCStats::has_live_count,
                    MVCCStats::get_live_count,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "key_count",
                    MVCCStats::has_key_count,
                    MVCCStats::get_key_count,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "val_count",
                    MVCCStats::has_val_count,
                    MVCCStats::get_val_count,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "intent_count",
                    MVCCStats::has_intent_count,
                    MVCCStats::get_intent_count,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "intent_age",
                    MVCCStats::has_intent_age,
                    MVCCStats::get_intent_age,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "gc_bytes_age",
                    MVCCStats::has_gc_bytes_age,
                    MVCCStats::get_gc_bytes_age,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "last_update_nanos",
                    MVCCStats::has_last_update_nanos,
                    MVCCStats::get_last_update_nanos,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MVCCStats>(
                    "MVCCStats",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for MVCCStats {
    fn clear(&mut self) {
        self.clear_live_bytes();
        self.clear_key_bytes();
        self.clear_val_bytes();
        self.clear_intent_bytes();
        self.clear_live_count();
        self.clear_key_count();
        self.clear_val_count();
        self.clear_intent_count();
        self.clear_intent_age();
        self.clear_gc_bytes_age();
        self.clear_last_update_nanos();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for MVCCStats {
    fn eq(&self, other: &MVCCStats) -> bool {
        self.live_bytes == other.live_bytes &&
        self.key_bytes == other.key_bytes &&
        self.val_bytes == other.val_bytes &&
        self.intent_bytes == other.intent_bytes &&
        self.live_count == other.live_count &&
        self.key_count == other.key_count &&
        self.val_count == other.val_count &&
        self.intent_count == other.intent_count &&
        self.intent_age == other.intent_age &&
        self.gc_bytes_age == other.gc_bytes_age &&
        self.last_update_nanos == other.last_update_nanos &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for MVCCStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug)]
pub enum ReplicaChangeType {
    ADD_REPLICA = 0,
    REMOVE_REPLICA = 1,
}

impl ::protobuf::ProtobufEnum for ReplicaChangeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReplicaChangeType> {
        match value {
            0 => ::std::option::Option::Some(ReplicaChangeType::ADD_REPLICA),
            1 => ::std::option::Option::Some(ReplicaChangeType::REMOVE_REPLICA),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<ReplicaChangeType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ReplicaChangeType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ReplicaChangeType {
}

#[derive(Clone,PartialEq,Eq,Debug)]
pub enum IsolationType {
    SERIALIZABLE = 0,
    SNAPSHOT = 1,
}

impl ::protobuf::ProtobufEnum for IsolationType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IsolationType> {
        match value {
            0 => ::std::option::Option::Some(IsolationType::SERIALIZABLE),
            1 => ::std::option::Option::Some(IsolationType::SNAPSHOT),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<IsolationType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("IsolationType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for IsolationType {
}

#[derive(Clone,PartialEq,Eq,Debug)]
pub enum TransactionStatus {
    PENDING = 0,
    COMMITTED = 1,
    ABORTED = 2,
}

impl ::protobuf::ProtobufEnum for TransactionStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionStatus> {
        match value {
            0 => ::std::option::Option::Some(TransactionStatus::PENDING),
            1 => ::std::option::Option::Some(TransactionStatus::COMMITTED),
            2 => ::std::option::Option::Some(TransactionStatus::ABORTED),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<TransactionStatus>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TransactionStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TransactionStatus {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x1a, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f,
    0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63,
    0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x09, 0x54,
    0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x11, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
    0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x12, 0x0f, 0x0a, 0x07, 0x6c,
    0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x22, 0x75, 0x0a, 0x05,
    0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0d, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x03, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
    0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
    0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x63,
    0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
    0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x0b, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
    0x01, 0x28, 0x09, 0x22, 0x43, 0x0a, 0x09, 0x4d, 0x56, 0x43, 0x43, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x12, 0x0f, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x08, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x16, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56,
    0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x0c, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x16, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x0b, 0x52, 0x61, 0x77, 0x4b,
    0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0c, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x0c, 0x22, 0x43, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e,
    0x74, 0x12, 0x12, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0f, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
    0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
    0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x22, 0x7a, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69,
    0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
    0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
    0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
    0x12, 0x32, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
    0x70, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x69,
    0x67, 0x67, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
    0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x63,
    0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e,
    0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x10,
    0x73, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64,
    0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67,
    0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
    0x12, 0x0f, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x05, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x05, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
    0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72,
    0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
    0x63, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x10,
    0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
    0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61,
    0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
    0x22, 0xdd, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
    0x6d, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x70,
    0x6c, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
    0x12, 0x34, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
    0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f,
    0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54,
    0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
    0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
    0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f,
    0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
    0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
    0x0f, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c,
    0x22, 0x1d, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x05,
    0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x22,
    0xb8, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
    0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0b, 0x0a,
    0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64,
    0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
    0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x73, 0x6f, 0x6c,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
    0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73,
    0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73,
    0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f,
    0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
    0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
    0x0d, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x12, 0x32,
    0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
    0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61,
    0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
    0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
    0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63,
    0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
    0x70, 0x12, 0x32, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
    0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x63, 0x6b,
    0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
    0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d,
    0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
    0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
    0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74,
    0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x19, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x05, 0x4c, 0x65,
    0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e,
    0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14,
    0x0a, 0x0c, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
    0x20, 0x01, 0x28, 0x04, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x4d, 0x56, 0x43, 0x43, 0x4d, 0x65, 0x74,
    0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
    0x0f, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
    0x12, 0x11, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
    0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
    0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63,
    0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a,
    0x0a, 0x47, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x0f, 0x6c,
    0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x03, 0x12, 0x1b, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69,
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x03, 0x22, 0x56, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44,
    0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
    0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x03, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x03, 0x12, 0x13, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x22, 0x68, 0x0a, 0x0e, 0x54, 0x69, 0x6d,
    0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x04, 0x6e,
    0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x6f, 0x75,
    0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x61, 0x74,
    0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
    0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
    0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x09, 0x4d, 0x56, 0x43, 0x43, 0x53, 0x74, 0x61, 0x74,
    0x73, 0x12, 0x12, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74,
    0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f,
    0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x12, 0x14, 0x0a, 0x0c, 0x69,
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
    0x03, 0x12, 0x12, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
    0x05, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75,
    0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f,
    0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x12, 0x14, 0x0a, 0x0c, 0x69,
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
    0x03, 0x12, 0x12, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x18,
    0x09, 0x20, 0x01, 0x28, 0x03, 0x12, 0x14, 0x0a, 0x0c, 0x67, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65,
    0x73, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x12, 0x19, 0x0a, 0x11, 0x6c,
    0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
    0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x2a, 0x38, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
    0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
    0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
    0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x01,
    0x2a, 0x2f, 0x0a, 0x0d, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
    0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c,
    0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10,
    0x01, 0x2a, 0x3c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
    0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
    0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42,
    0x07, 0x5a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4a, 0xef, 0x79, 0x0a, 0x07, 0x12, 0x05, 0x00,
    0x00, 0xb1, 0x02, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x02, 0x07, 0x25, 0x0a,
    0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x03, 0x08, 0x17, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03,
    0x05, 0x00, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x05, 0x00, 0x1c,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x05, 0x07, 0x11, 0x0a, 0x0d,
    0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x05, 0x07, 0x11, 0x0a, 0x0e, 0x0a,
    0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05, 0x07, 0x11, 0x0a, 0x0c, 0x0a,
    0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x05, 0x14, 0x1b, 0x0a, 0x48, 0x0a, 0x02, 0x05,
    0x00, 0x12, 0x04, 0x08, 0x00, 0x0b, 0x01, 0x1a, 0x3c, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
    0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
    0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x68,
    0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x54, 0x72, 0x69, 0x67,
    0x67, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x08, 0x05,
    0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x09, 0x02, 0x12, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x09, 0x02, 0x0d, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x09, 0x10, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00,
    0x02, 0x01, 0x12, 0x03, 0x0a, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x0a, 0x02, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03,
    0x0a, 0x13, 0x14, 0x0a, 0x3d, 0x0a, 0x02, 0x05, 0x01, 0x12, 0x04, 0x0e, 0x00, 0x13, 0x01, 0x1a,
    0x31, 0x20, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20,
    0x54, 0x4f, 0x44, 0x4f, 0x28, 0x6a, 0x69, 0x61, 0x6a, 0x69, 0x61, 0x29, 0x20, 0x4e, 0x65, 0x65,
    0x64, 0x73, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x01, 0x01, 0x12, 0x03, 0x0e, 0x05, 0x12, 0x0a, 0x3d,
    0x0a, 0x04, 0x05, 0x01, 0x02, 0x00, 0x12, 0x03, 0x10, 0x02, 0x13, 0x1a, 0x30, 0x20, 0x53, 0x45,
    0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x28,
    0x6a, 0x69, 0x61, 0x6a, 0x69, 0x61, 0x29, 0x20, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x64, 0x6f,
    0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x10, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x10, 0x11, 0x12, 0x0a, 0x39, 0x0a, 0x04, 0x05, 0x01, 0x02,
    0x01, 0x12, 0x03, 0x12, 0x02, 0x0f, 0x1a, 0x2c, 0x20, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
    0x54, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x28, 0x6a, 0x69, 0x61, 0x6a, 0x69, 0x61, 0x29, 0x20, 0x4e,
    0x65, 0x65, 0x64, 0x73, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x12,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x12, 0x0d, 0x0e,
    0x0a, 0x4c, 0x0a, 0x02, 0x05, 0x02, 0x12, 0x04, 0x16, 0x00, 0x27, 0x01, 0x1a, 0x40, 0x20, 0x54,
    0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
    0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
    0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
    0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a,
    0x0a, 0x03, 0x05, 0x02, 0x01, 0x12, 0x03, 0x16, 0x05, 0x16, 0x0a, 0xf1, 0x01, 0x0a, 0x04, 0x05,
    0x02, 0x02, 0x00, 0x12, 0x03, 0x1b, 0x02, 0x0e, 0x1a, 0xe3, 0x01, 0x20, 0x50, 0x45, 0x4e, 0x44,
    0x49, 0x4e, 0x47, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
    0x6c, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6e,
    0x65, 0x77, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
    0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x20, 0x20, 0x6d,
    0x6f, 0x76, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
    0x20, 0x74, 0x6f, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
    0x54, 0x54, 0x45, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x2e,
    0x20, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x0a,
    0x20, 0x20, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x50,
    0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64,
    0x20, 0x61, 0x73, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x20, 0x69, 0x6e,
    0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
    0x67, 0x20, 0x4d, 0x56, 0x43, 0x43, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1b, 0x02, 0x09, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x02, 0x02, 0x00, 0x02, 0x12, 0x03, 0x1b, 0x0c, 0x0d, 0x0a, 0x8d, 0x02, 0x0a, 0x04, 0x05,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x21, 0x02, 0x10, 0x1a, 0xff, 0x01, 0x20, 0x43, 0x4f, 0x4d, 0x4d,
    0x49, 0x54, 0x54, 0x45, 0x44, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
    0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62,
    0x65, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2e,
    0x20, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20,
    0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61,
    0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69,
    0x73, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x0a, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x43,
    0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x62,
    0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x74, 0x68,
    0x65, 0x72, 0x0a, 0x20, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x2c, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x22,
    0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x6d,
    0x61, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x0a,
    0x20, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x21, 0x02, 0x0b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x01,
    0x02, 0x12, 0x03, 0x21, 0x0e, 0x0f, 0x0a, 0xdc, 0x01, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x26, 0x02, 0x0e, 0x1a, 0xce, 0x01, 0x20, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x20,
    0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77,
    0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x62,
    0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x20, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20,
    0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20,
    0x69, 0x6e, 0x74, 0x6f, 0x0a, 0x20, 0x20, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x20, 0x73,
    0x74, 0x61, 0x74, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
    0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x6d,
    0x61, 0x64, 0x65, 0x20, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6f,
    0x74, 0x68, 0x65, 0x72, 0x0a, 0x20, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x26, 0x02, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x02, 0x02, 0x12, 0x03, 0x26, 0x0c,
    0x0d, 0x0a, 0x47, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x2a, 0x00, 0x33, 0x01, 0x1a, 0x3b, 0x20,
    0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
    0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63,
    0x61, 0x6c, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00,
    0x01, 0x12, 0x03, 0x2a, 0x08, 0x11, 0x0a, 0x59, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x2d, 0x02, 0x1f, 0x1a, 0x4c, 0x20, 0x48, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x61, 0x20, 0x77, 0x61,
    0x6c, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c,
    0x6c, 0x79, 0x20, 0x61, 0x20, 0x75, 0x6e, 0x69, 0x78, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x0a, 0x20, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
    0x20, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x2d, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x2d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2d, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x2d, 0x1d, 0x1e, 0x0a, 0xd6, 0x01, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x01, 0x12, 0x03, 0x32, 0x02, 0x1d, 0x1a, 0xc8, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c,
    0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
    0x20, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c,
    0x69, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77,
    0x68, 0x6f, 0x73, 0x65, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x0a, 0x20, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2e, 0x20, 0x49, 0x74, 0x20,
    0x69, 0x73, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x62,
    0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x28, 0x6d, 0x61, 0x78, 0x69, 0x6d,
    0x75, 0x6d, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x0a, 0x20, 0x20, 0x73, 0x6b, 0x65, 0x77, 0x29,
    0x2f, 0x28, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x6e, 0x73, 0x20, 0x62, 0x65, 0x74,
    0x77, 0x65, 0x65, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x29, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62,
    0x6c, 0x65, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
    0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x32, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x32, 0x0b, 0x10, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x32, 0x11, 0x18, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x32, 0x1b, 0x1c, 0x0a, 0x8c, 0x02, 0x0a, 0x02, 0x04,
    0x01, 0x12, 0x04, 0x39, 0x00, 0x4e, 0x01, 0x1a, 0xff, 0x01, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x20, 0x4d,
    0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x61,
    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x0a, 0x20,
    0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x62,
    0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
    0x70, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x77, 0x6f, 0x0a, 0x20, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73,
    0x3a, 0x20, 0x61, 0x20, 0x22, 0x62, 0x61, 0x67, 0x20, 0x6f, 0x27, 0x20, 0x62, 0x79, 0x74, 0x65,
    0x73, 0x22, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20,
    0x73, 0x6c, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63,
    0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x69, 0x6e, 0x74,
    0x36, 0x34, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x41,
    0x50, 0x49, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01,
    0x12, 0x03, 0x39, 0x08, 0x0d, 0x0a, 0x66, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x3c,
    0x02, 0x1b, 0x1a, 0x59, 0x20, 0x42, 0x79, 0x74, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c,
    0x64, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e,
    0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x0a, 0x20, 0x20, 0x73, 0x68,
    0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x3c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x00, 0x05, 0x12, 0x03, 0x3c, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x3c, 0x11, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03,
    0x12, 0x03, 0x3c, 0x19, 0x1a, 0x0a, 0xb5, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03,
    0x40, 0x02, 0x1d, 0x1a, 0xa7, 0x01, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x69,
    0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x0a, 0x20,
    0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x2e, 0x20,
    0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x20, 0x61, 0x74,
    0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6d, 0x61, 0x6b, 0x69,
    0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
    0x6e, 0x74, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03, 0x40, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x01, 0x05, 0x12, 0x03, 0x40, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x40, 0x11, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03,
    0x12, 0x03, 0x40, 0x1b, 0x1c, 0x0a, 0xa8, 0x03, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03,
    0x47, 0x02, 0x20, 0x1a, 0x9a, 0x03, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20,
    0x69, 0x73, 0x20, 0x61, 0x20, 0x43, 0x52, 0x43, 0x2d, 0x33, 0x32, 0x2d, 0x49, 0x45, 0x45, 0x45,
    0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6b, 0x65, 0x79, 0x20, 0x2b, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x20, 0x69, 0x6e,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x0a, 0x20, 0x20, 0x49,
    0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74,
    0x65, 0x67, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
    0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x20,
    0x38, 0x0a, 0x20, 0x20, 0x62, 0x79, 0x74, 0x65, 0x2c, 0x20, 0x62, 0x69, 0x67, 0x2d, 0x65, 0x6e,
    0x64, 0x69, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69,
    0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
    0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x65, 0x6e, 0x64, 0x2d, 0x74, 0x6f, 0x2d, 0x65, 0x6e, 0x64,
    0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66,
    0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x20, 0x69, 0x6e,
    0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x72, 0x69,
    0x74, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c,
    0x6c, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x0a, 0x20,
    0x20, 0x77, 0x69, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x64,
    0x2d, 0x74, 0x6f, 0x2d, 0x65, 0x6e, 0x64, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
    0x6d, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x69, 0x6c, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x03, 0x47, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x05, 0x12, 0x03, 0x47, 0x0b, 0x12, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x47, 0x13, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x47, 0x1e, 0x1f, 0x0a, 0x22, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x03,
    0x12, 0x03, 0x49, 0x02, 0x34, 0x1a, 0x15, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
    0x70, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x03, 0x04, 0x12, 0x03, 0x49, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x03, 0x06, 0x12, 0x03, 0x49, 0x0b, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x49, 0x26, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x03, 0x12,
    0x03, 0x49, 0x32, 0x33, 0x0a, 0xd7, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x04, 0x12, 0x03, 0x4d,
    0x02, 0x1a, 0x1a, 0xc9, 0x01, 0x20, 0x54, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20,
    0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x20,
    0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61,
    0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x0a, 0x20, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c,
    0x20, 0x54, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
    0x64, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
    0x6e, 0x20, 0x68, 0x6f, 0x77, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x79, 0x74, 0x65,
    0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
    0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
    0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x04, 0x12, 0x03, 0x4d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x04, 0x05, 0x12, 0x03, 0x4d, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x04, 0x01, 0x12, 0x03, 0x4d, 0x12, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04,
    0x03, 0x12, 0x03, 0x4d, 0x18, 0x19, 0x0a, 0x61, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x52, 0x00,
    0x58, 0x01, 0x1a, 0x55, 0x20, 0x4d, 0x56, 0x43, 0x43, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x64,
    0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x20, 0x62, 0x65,
    0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x76, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x61, 0x6e,
    0x64, 0x0a, 0x20, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6d,
    0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01,
    0x12, 0x03, 0x52, 0x08, 0x11, 0x0a, 0x5a, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x55,
    0x02, 0x1c, 0x1a, 0x4d, 0x20, 0x54, 0x72, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x64,
    0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x66,
    0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75,
    0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x0a, 0x20, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x69, 0x6c, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x03, 0x55, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05, 0x12, 0x03, 0x55, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x55, 0x10, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x55, 0x1a, 0x1b, 0x0a, 0x44, 0x0a, 0x04, 0x04, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x57, 0x02, 0x2c, 0x1a, 0x37, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x2e, 0x20, 0x4e, 0x69, 0x6c, 0x20, 0x69, 0x66, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
    0x65, 0x64, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x20, 0x6e, 0x6f, 0x74, 0x20,
    0x6e, 0x69, 0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x57, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x01, 0x06, 0x12, 0x03, 0x57, 0x0b, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x57, 0x22, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x57, 0x2a, 0x2b, 0x0a, 0x8d, 0x01, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04,
    0x5c, 0x00, 0x5f, 0x01, 0x1a, 0x80, 0x01, 0x20, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x70, 0x61, 0x69, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4b, 0x65,
    0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x4b, 0x65, 0x79, 0x2f, 0x56, 0x61, 0x6c,
    0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x0a, 0x20, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
    0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x53, 0x63, 0x61, 0x6e,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x65, 0x6d, 0x62,
    0x65, 0x64, 0x73, 0x20, 0x61, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20,
    0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03,
    0x5c, 0x08, 0x10, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x5d, 0x02, 0x19,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x03, 0x5d, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03, 0x5d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5d, 0x11, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x5d, 0x17, 0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01,
    0x12, 0x03, 0x5e, 0x02, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x03,
    0x5e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x06, 0x12, 0x03, 0x5e, 0x0b,
    0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x5e, 0x22, 0x27, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x03, 0x5e, 0x2a, 0x2b, 0x0a, 0x48, 0x0a,
    0x02, 0x04, 0x04, 0x12, 0x04, 0x62, 0x00, 0x65, 0x01, 0x1a, 0x3c, 0x20, 0x52, 0x61, 0x77, 0x4b,
    0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x77, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x61, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x03,
    0x62, 0x08, 0x13, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x03, 0x63, 0x02, 0x19,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x03, 0x63, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x05, 0x12, 0x03, 0x63, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x63, 0x11, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x63, 0x17, 0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x01,
    0x12, 0x03, 0x64, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12, 0x03,
    0x64, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x05, 0x12, 0x03, 0x64, 0x0b,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x01, 0x12, 0x03, 0x64, 0x11, 0x16, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x03, 0x12, 0x03, 0x64, 0x19, 0x1a, 0x0a, 0xb6, 0x01,
    0x0a, 0x02, 0x04, 0x05, 0x12, 0x04, 0x6a, 0x00, 0x6e, 0x01, 0x1a, 0xa9, 0x01, 0x20, 0x41, 0x20,
    0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75,
    0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61,
    0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x53, 0x74, 0x6f,
    0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74,
    0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
    0x79, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x67,
    0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x0a, 0x20, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
    0x20, 0x6b, 0x65, 0x79, 0x20, 0x28, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64,
    0x65, 0x6e, 0x74, 0x29, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x05, 0x01, 0x12, 0x03, 0x6a,
    0x08, 0x12, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x00, 0x12, 0x03, 0x6b, 0x02, 0x21, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12, 0x03, 0x6b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x00, 0x05, 0x12, 0x03, 0x6b, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x6b, 0x12, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x6b, 0x1f, 0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x01, 0x12,
    0x03, 0x6c, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x04, 0x12, 0x03, 0x6c,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x05, 0x12, 0x03, 0x6c, 0x0b, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x01, 0x12, 0x03, 0x6c, 0x11, 0x18, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x03, 0x12, 0x03, 0x6c, 0x1b, 0x1c, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x05, 0x02, 0x02, 0x12, 0x03, 0x6d, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x02, 0x04, 0x12, 0x03, 0x6d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x05,
    0x12, 0x03, 0x6d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x6d, 0x11, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x03, 0x12, 0x03, 0x6d, 0x1c,
    0x1d, 0x0a, 0xd7, 0x02, 0x0a, 0x02, 0x04, 0x06, 0x12, 0x04, 0x75, 0x00, 0x78, 0x01, 0x1a, 0xca,
    0x02, 0x20, 0x41, 0x20, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
    0x20, 0x69, 0x73, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20,
    0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
    0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x6c,
    0x69, 0x74, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x20, 0x49, 0x74,
    0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70,
    0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20,
    0x74, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x68, 0x61, 0x6c, 0x66,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20,
    0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x76, 0x65, 0x72,
    0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
    0x20, 0x68, 0x61, 0x6c, 0x66, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f,
    0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65,
    0x70, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
    0x70, 0x6c, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
    0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77,
    0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x70, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20,
    0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x06, 0x01, 0x12, 0x03, 0x75, 0x08, 0x14, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x00, 0x12,
    0x03, 0x76, 0x02, 0x3d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x04, 0x12, 0x03, 0x76,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x06, 0x12, 0x03, 0x76, 0x0b, 0x2b,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x01, 0x12, 0x03, 0x76, 0x2c, 0x38, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x03, 0x12, 0x03, 0x76, 0x3b, 0x3c, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x06, 0x02, 0x01, 0x12, 0x03, 0x77, 0x02, 0x39, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02,
    0x01, 0x04, 0x12, 0x03, 0x77, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x06,
    0x12, 0x03, 0x77, 0x0b, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x77, 0x2c, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x03, 0x12, 0x03, 0x77, 0x37,
    0x38, 0x0a, 0xa2, 0x02, 0x0a, 0x02, 0x04, 0x07, 0x12, 0x05, 0x7e, 0x00, 0x81, 0x01, 0x01, 0x1a,
    0x94, 0x02, 0x20, 0x41, 0x20, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
    0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61,
    0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
    0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65,
    0x72, 0x67, 0x65, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x20, 0x49,
    0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
    0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x64, 0x65, 0x73,
    0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x6f, 0x77,
    0x20, 0x65, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x0a, 0x20, 0x20, 0x77,
    0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
    0x6c, 0x79, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x20,
    0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6e, 0x61,
    0x6c, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x20, 0x74, 0x6f,
    0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x70, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x07, 0x01, 0x12, 0x03, 0x7e,
    0x08, 0x14, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x00, 0x12, 0x03, 0x7f, 0x02, 0x3d, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x04, 0x12, 0x03, 0x7f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x07, 0x02, 0x00, 0x06, 0x12, 0x03, 0x7f, 0x0b, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x00, 0x01, 0x12, 0x03, 0x7f, 0x2c, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x7f, 0x3b, 0x3c, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x01, 0x12,
    0x04, 0x80, 0x01, 0x02, 0x26, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x04, 0x12, 0x04,
    0x80, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x05, 0x12, 0x04, 0x80,
    0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x01, 0x12, 0x04, 0x80, 0x01,
    0x11, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x03, 0x12, 0x04, 0x80, 0x01, 0x24,
    0x25, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x08, 0x12, 0x06, 0x83, 0x01, 0x00, 0x89, 0x01, 0x01, 0x0a,
    0x0b, 0x0a, 0x03, 0x04, 0x08, 0x01, 0x12, 0x04, 0x83, 0x01, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x04,
    0x04, 0x08, 0x02, 0x00, 0x12, 0x04, 0x84, 0x01, 0x02, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08,
    0x02, 0x00, 0x04, 0x12, 0x04, 0x84, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02,
    0x00, 0x05, 0x12, 0x04, 0x84, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00,
    0x01, 0x12, 0x04, 0x84, 0x01, 0x11, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00, 0x03,
    0x12, 0x04, 0x84, 0x01, 0x1b, 0x1c, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x01, 0x12, 0x04,
    0x85, 0x01, 0x02, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x04, 0x12, 0x04, 0x85,
    0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x05, 0x12, 0x04, 0x85, 0x01,
    0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x01, 0x12, 0x04, 0x85, 0x01, 0x11,
    0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x03, 0x12, 0x04, 0x85, 0x01, 0x1c, 0x1d,
    0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x02, 0x12, 0x04, 0x86, 0x01, 0x02, 0x3e, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x04, 0x12, 0x04, 0x86, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x08, 0x02, 0x02, 0x06, 0x12, 0x04, 0x86, 0x01, 0x0b, 0x2d, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x08, 0x02, 0x02, 0x01, 0x12, 0x04, 0x86, 0x01, 0x2e, 0x39, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x08, 0x02, 0x02, 0x03, 0x12, 0x04, 0x86, 0x01, 0x3c, 0x3d, 0x0a, 0x3e, 0x0a, 0x04, 0x04, 0x08,
    0x02, 0x03, 0x12, 0x04, 0x88, 0x01, 0x02, 0x39, 0x1a, 0x30, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e,
    0x65, 0x77, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
    0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08,
    0x02, 0x03, 0x04, 0x12, 0x04, 0x88, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02,
    0x03, 0x06, 0x12, 0x04, 0x88, 0x01, 0x0b, 0x23, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x03,
    0x01, 0x12, 0x04, 0x88, 0x01, 0x24, 0x34, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x03, 0x03,
    0x12, 0x04, 0x88, 0x01, 0x37, 0x38, 0x0a, 0x54, 0x0a, 0x02, 0x04, 0x09, 0x12, 0x06, 0x8c, 0x01,
    0x00, 0x94, 0x01, 0x01, 0x1a, 0x46, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x69,
    0x67, 0x67, 0x65, 0x72, 0x20, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65,
    0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74,
    0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
    0x74, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03,
    0x04, 0x09, 0x01, 0x12, 0x04, 0x8c, 0x01, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x09, 0x02,
    0x00, 0x12, 0x04, 0x8d, 0x01, 0x02, 0x3b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x04,
    0x12, 0x04, 0x8d, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x06, 0x12,
    0x04, 0x8d, 0x01, 0x0b, 0x28, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x01, 0x12, 0x04,
    0x8d, 0x01, 0x29, 0x36, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x03, 0x12, 0x04, 0x8d,
    0x01, 0x39, 0x3a, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x01, 0x12, 0x04, 0x8e, 0x01, 0x02,
    0x3b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x04, 0x12, 0x04, 0x8e, 0x01, 0x02, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x06, 0x12, 0x04, 0x8e, 0x01, 0x0b, 0x28, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x01, 0x12, 0x04, 0x8e, 0x01, 0x29, 0x36, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x03, 0x12, 0x04, 0x8e, 0x01, 0x39, 0x3a, 0x0a, 0x0c, 0x0a,
    0x04, 0x04, 0x09, 0x02, 0x02, 0x12, 0x04, 0x8f, 0x01, 0x02, 0x4e, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x09, 0x02, 0x02, 0x04, 0x12, 0x04, 0x8f, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x02, 0x06, 0x12, 0x04, 0x8f, 0x01, 0x0b, 0x31, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02,
    0x02, 0x01, 0x12, 0x04, 0x8f, 0x01, 0x32, 0x49, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x02,
    0x03, 0x12, 0x04, 0x8f, 0x01, 0x4c, 0x4d, 0x0a, 0xb8, 0x01, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x03,
    0x12, 0x04, 0x93, 0x01, 0x02, 0x1d, 0x1a, 0xa9, 0x01, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f,
    0x66, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73,
    0x6f, 0x6c, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x6f,
    0x72, 0x20, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x0a, 0x20, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
    0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
    0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x79, 0x20, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x04, 0x12, 0x04, 0x93, 0x01, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x05, 0x12, 0x04, 0x93, 0x01, 0x0b, 0x10,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x01, 0x12, 0x04, 0x93, 0x01, 0x11, 0x18, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x03, 0x12, 0x04, 0x93, 0x01, 0x1b, 0x1c, 0x0a, 0x8f,
    0x01, 0x0a, 0x02, 0x04, 0x0a, 0x12, 0x06, 0x98, 0x01, 0x00, 0x9c, 0x01, 0x01, 0x1a, 0x80, 0x01,
    0x20, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x73, 0x20,
    0x61, 0x20, 0x67, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66,
    0x20, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x20, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x20, 0x41, 0x64, 0x64, 0x28, 0x29, 0x0a, 0x20, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x20,
    0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x43,
    0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x28, 0x29, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
    0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x0a,
    0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0a, 0x01, 0x12, 0x04, 0x98, 0x01, 0x08, 0x10, 0x0a, 0x95, 0x01,
    0x0a, 0x04, 0x04, 0x0a, 0x02, 0x00, 0x12, 0x04, 0x9b, 0x01, 0x02, 0x2b, 0x1a, 0x86, 0x01, 0x20,
    0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64,
    0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x74, 0x79,
    0x70, 0x65, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
    0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x0a, 0x20, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x74,
    0x65, 0x72, 0x61, 0x63, 0x74, 0x20, 0x62, 0x61, 0x64, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e,
    0x64, 0x2f, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x04, 0x12, 0x04,
    0x9b, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x05, 0x12, 0x04, 0x9b,
    0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x01, 0x12, 0x04, 0x9b, 0x01,
    0x11, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x03, 0x12, 0x04, 0x9b, 0x01, 0x19,
    0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x08, 0x12, 0x04, 0x9b, 0x01, 0x1b, 0x2a,
    0x0a, 0x10, 0x0a, 0x08, 0x04, 0x0a, 0x02, 0x00, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x04, 0x9b, 0x01,
    0x1c, 0x29, 0x0a, 0x11, 0x0a, 0x09, 0x04, 0x0a, 0x02, 0x00, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12,
    0x04, 0x9b, 0x01, 0x1c, 0x22, 0x0a, 0x12, 0x0a, 0x0a, 0x04, 0x0a, 0x02, 0x00, 0x08, 0xe7, 0x07,
    0x00, 0x02, 0x00, 0x12, 0x04, 0x9b, 0x01, 0x1c, 0x22, 0x0a, 0x13, 0x0a, 0x0b, 0x04, 0x0a, 0x02,
    0x00, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0x9b, 0x01, 0x1c, 0x22, 0x0a, 0x11,
    0x0a, 0x09, 0x04, 0x0a, 0x02, 0x00, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x04, 0x9b, 0x01, 0x25,
    0x29, 0x0a, 0xda, 0x02, 0x0a, 0x02, 0x04, 0x0b, 0x12, 0x06, 0xa4, 0x01, 0x00, 0xd3, 0x01, 0x01,
    0x1a, 0xcb, 0x02, 0x20, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x77,
    0x6f, 0x72, 0x6b, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x6f, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x0a, 0x20,
    0x20, 0x43, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,
    0x74, 0x77, 0x6f, 0x20, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x65,
    0x76, 0x65, 0x6c, 0x73, 0x3a, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x0a, 0x20,
    0x20, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73,
    0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70,
    0x73, 0x68, 0x6f, 0x74, 0x20, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
    0x45, 0x61, 0x63, 0x68, 0x20, 0x43, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x0a, 0x20,
    0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
    0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f,
    0x6d, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73,
    0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62,
    0x65, 0x0a, 0x20, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x63, 0x69,
    0x64, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61,
    0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
    0x20, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x0a,
    0x20, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0b,
    0x0a, 0x03, 0x04, 0x0b, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x08, 0x13, 0x0a, 0x0c, 0x0a, 0x04, 0x04,
    0x0b, 0x02, 0x00, 0x12, 0x04, 0xa5, 0x01, 0x02, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x00, 0x04, 0x12, 0x04, 0xa5, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00,
    0x05, 0x12, 0x04, 0xa5, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x01,
    0x12, 0x04, 0xa5, 0x01, 0x12, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x03, 0x12,
    0x04, 0xa5, 0x01, 0x19, 0x1a, 0x0a, 0xd7, 0x01, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x01, 0x12, 0x04,
    0xaa, 0x01, 0x02, 0x19, 0x1a, 0xc8, 0x01, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x69, 0x73, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x6e, 0x63,
    0x68, 0x6f, 0x72, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x79,
    0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
    0x72, 0x73, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x72, 0x20,
    0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
    0x6e, 0x64, 0x0a, 0x20, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20,
    0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
    0x68, 0x6f, 0x6c, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x01, 0x04, 0x12, 0x04, 0xaa, 0x01, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0b, 0x02, 0x01, 0x05, 0x12, 0x04, 0xaa, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0b, 0x02, 0x01, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x11, 0x14, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0b, 0x02, 0x01, 0x03, 0x12, 0x04, 0xaa, 0x01, 0x17, 0x18, 0x0a, 0x4b, 0x0a, 0x04, 0x04,
    0x0b, 0x02, 0x02, 0x12, 0x04, 0xac, 0x01, 0x02, 0x18, 0x1a, 0x3d, 0x20, 0x49, 0x44, 0x20, 0x69,
    0x73, 0x20, 0x61, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x64, 0x65, 0x6e,
    0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02,
    0x04, 0x12, 0x04, 0xac, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02, 0x05,
    0x12, 0x04, 0xac, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02, 0x01, 0x12,
    0x04, 0xac, 0x01, 0x11, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02, 0x03, 0x12, 0x04,
    0xac, 0x01, 0x16, 0x17, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x03, 0x12, 0x04, 0xad, 0x01,
    0x02, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x04, 0x12, 0x04, 0xad, 0x01, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x05, 0x12, 0x04, 0xad, 0x01, 0x0b, 0x10,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x01, 0x12, 0x04, 0xad, 0x01, 0x11, 0x19, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x03, 0x12, 0x04, 0xad, 0x01, 0x1c, 0x1d, 0x0a, 0x0c,
    0x0a, 0x04, 0x04, 0x0b, 0x02, 0x04, 0x12, 0x04, 0xae, 0x01, 0x02, 0x38, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0b, 0x02, 0x04, 0x04, 0x12, 0x04, 0xae, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0b, 0x02, 0x04, 0x06, 0x12, 0x04, 0xae, 0x01, 0x0b, 0x29, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b,
    0x02, 0x04, 0x01, 0x12, 0x04, 0xae, 0x01, 0x2a, 0x33, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x04, 0x03, 0x12, 0x04, 0xae, 0x01, 0x36, 0x37, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x05,
    0x12, 0x04, 0xaf, 0x01, 0x02, 0x39, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x04, 0x12,
    0x04, 0xaf, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x06, 0x12, 0x04,
    0xaf, 0x01, 0x0b, 0x2d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x01, 0x12, 0x04, 0xaf,
    0x01, 0x2e, 0x34, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x03, 0x12, 0x04, 0xaf, 0x01,
    0x37, 0x38, 0x0a, 0x29, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x06, 0x12, 0x04, 0xb1, 0x01, 0x02, 0x1b,
    0x1a, 0x1b, 0x20, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x6f,
    0x6e, 0x20, 0x74, 0x78, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0b, 0x02, 0x06, 0x04, 0x12, 0x04, 0xb1, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0b, 0x02, 0x06, 0x05, 0x12, 0x04, 0xb1, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0b, 0x02, 0x06, 0x01, 0x12, 0x04, 0xb1, 0x01, 0x11, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b,
    0x02, 0x06, 0x03, 0x12, 0x04, 0xb1, 0x01, 0x19, 0x1a, 0x0a, 0x2d, 0x0a, 0x04, 0x04, 0x0b, 0x02,
    0x07, 0x12, 0x04, 0xb3, 0x01, 0x02, 0x39, 0x1a, 0x1f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61,
    0x73, 0x74, 0x20, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x07,
    0x04, 0x12, 0x04, 0xb3, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x07, 0x06,
    0x12, 0x04, 0xb3, 0x01, 0x0b, 0x25, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x07, 0x01, 0x12,
    0x04, 0xb3, 0x01, 0x26, 0x34, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x07, 0x03, 0x12, 0x04,
    0xb3, 0x01, 0x37, 0x38, 0x0a, 0x7a, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x08, 0x12, 0x04, 0xb6, 0x01,
    0x02, 0x34, 0x1a, 0x6c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
    0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x20, 0x61, 0x73, 0x0a,
    0x20, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x61,
    0x6c, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
    0x78, 0x6e, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x08, 0x04, 0x12, 0x04, 0xb6, 0x01, 0x02, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x08, 0x06, 0x12, 0x04, 0xb6, 0x01, 0x0b, 0x25, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0b, 0x02, 0x08, 0x01, 0x12, 0x04, 0xb6, 0x01, 0x26, 0x2f, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0b, 0x02, 0x08, 0x03, 0x12, 0x04, 0xb6, 0x01, 0x32, 0x33, 0x0a, 0xbd, 0x01, 0x0a,
    0x04, 0x04, 0x0b, 0x02, 0x09, 0x12, 0x04, 0xba, 0x01, 0x02, 0x3a, 0x1a, 0xae, 0x01, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73,
    0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x69,
    0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x64, 0x72, 0x69, 0x66, 0x74, 0x73,
    0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
    0x61, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2c, 0x20, 0x74, 0x68,
    0x65, 0x0a, 0x20, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0b, 0x02, 0x09, 0x04, 0x12, 0x04, 0xba, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0b, 0x02, 0x09, 0x06, 0x12, 0x04, 0xba, 0x01, 0x0b, 0x25, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b,
    0x02, 0x09, 0x01, 0x12, 0x04, 0xba, 0x01, 0x26, 0x34, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x09, 0x03, 0x12, 0x04, 0xba, 0x01, 0x37, 0x39, 0x0a, 0x94, 0x03, 0x0a, 0x04, 0x04, 0x0b, 0x02,
    0x0a, 0x12, 0x04, 0xc1, 0x01, 0x02, 0x39, 0x1a, 0x85, 0x03, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69,
    0x61, 0x6c, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x2b, 0x20, 0x63,
    0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x73, 0x6b, 0x65, 0x77, 0x2e, 0x20, 0x52, 0x65, 0x61, 0x64, 0x73,
    0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x0a, 0x20, 0x20, 0x74,
    0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
    0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x74, 0x72, 0x69,
    0x67, 0x67, 0x65, 0x72, 0x20, 0x61, 0x20, 0x74, 0x78, 0x6e, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74,
    0x72, 0x79, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,
    0x72, 0x65, 0x61, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x69,
    0x6e, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x0a,
    0x20, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x73, 0x65,
    0x20, 0x6e, 0x6f, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x75, 0x6e,
    0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6f, 0x63,
    0x63, 0x75, 0x72, 0x29, 0x2e, 0x0a, 0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65,
    0x20, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x3c, 0x20,
    0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73,
    0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x76,
    0x65, 0x0a, 0x20, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x3b,
    0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x4d,
    0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x73, 0x68, 0x6f, 0x75,
    0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x0a, 0x04, 0x12, 0x04, 0xc1, 0x01, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0b, 0x02, 0x0a, 0x06, 0x12, 0x04, 0xc1, 0x01, 0x0b, 0x25, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0b, 0x02, 0x0a, 0x01, 0x12, 0x04, 0xc1, 0x01, 0x26, 0x33, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0b, 0x02, 0x0a, 0x03, 0x12, 0x04, 0xc1, 0x01, 0x36, 0x38, 0x0a, 0xdf, 0x08, 0x0a, 0x04,
    0x04, 0x0b, 0x02, 0x0b, 0x12, 0x04, 0xd2, 0x01, 0x02, 0x38, 0x1a, 0xd0, 0x08, 0x20, 0x41, 0x20,
    0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69,
    0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x20, 0x52, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68,
    0x69, 0x6e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x49, 0x6e, 0x74,
    0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x0a, 0x20, 0x20, 0x6f, 0x63, 0x63,
    0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x70,
    0x72, 0x69, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70,
    0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e,
    0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x73, 0x20,
    0x61, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72,
    0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
    0x65, 0x64, 0x0a, 0x20, 0x20, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65,
    0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x27, 0x73, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x20,
    0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x2e, 0x20, 0x46, 0x75, 0x74,
    0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x72, 0x65,
    0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x66, 0x72, 0x65, 0x65, 0x64,
    0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
    0x79, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x0a, 0x20, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74, 0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
    0x6d, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x65,
    0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x0a, 0x20, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
    0x74, 0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65,
    0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x20, 0x54, 0x68, 0x69,
    0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
    0x6d, 0x70, 0x0a, 0x20, 0x20, 0x69, 0x73, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e,
    0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
    0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0a, 0x20, 0x20, 0x6f,
    0x72, 0x20, 0x28, 0x69, 0x66, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68,
    0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61,
    0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x29,
    0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x0a, 0x20, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x69, 0x6c,
    0x65, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x0a, 0x20, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x6d, 0x61, 0x6b,
    0x65, 0x20, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x20, 0x4d, 0x61,
    0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3d, 0x54, 0x69, 0x6d, 0x65, 0x73,
    0x74, 0x61, 0x6d, 0x70, 0x0a, 0x20, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x63,
    0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x77, 0x65, 0x27, 0x76, 0x65, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x6e,
    0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x0a, 0x20, 0x20,
    0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f,
    0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
    0x20, 0x61, 0x6e, 0x79, 0x20, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79,
    0x2e, 0x0a, 0x20, 0x20, 0x42, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x20, 0x61, 0x72, 0x65, 0x20, 0x66,
    0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61,
    0x6c, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61,
    0x6e, 0x67, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x74, 0x78,
    0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2c, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
    0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x65,
    0x72, 0x65, 0x2e, 0x0a, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
    0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x63,
    0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x64, 0x62, 0x2f, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61,
    0x63, 0x68, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x2f, 0x32, 0x32, 0x31, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0b, 0x02, 0x0b, 0x04, 0x12, 0x04, 0xd2, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0b, 0x02, 0x0b, 0x06, 0x12, 0x04, 0xd2, 0x01, 0x0b, 0x24, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0b, 0x02, 0x0b, 0x01, 0x12, 0x04, 0xd2, 0x01, 0x25, 0x32, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b,
    0x02, 0x0b, 0x03, 0x12, 0x04, 0xd2, 0x01, 0x35, 0x37, 0x0a, 0x6b, 0x0a, 0x02, 0x04, 0x0c, 0x12,
    0x06, 0xd7, 0x01, 0x00, 0xe0, 0x01, 0x01, 0x1a, 0x5d, 0x20, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65,
    0x72, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
    0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x68, 0x6f,
    0x6c, 0x64, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0c, 0x01, 0x12, 0x04, 0xd7,
    0x01, 0x08, 0x0d, 0x0a, 0x9a, 0x01, 0x0a, 0x04, 0x04, 0x0c, 0x02, 0x00, 0x12, 0x04, 0xdb, 0x01,
    0x02, 0x30, 0x1a, 0x8b, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
    0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x61,
    0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x73,
    0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x0a, 0x20, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x67,
    0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6c, 0x61, 0x73, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61,
    0x6c, 0x6c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x0a, 0x20, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x2e, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x00, 0x04, 0x12, 0x04, 0xdb, 0x01, 0x02, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x00, 0x06, 0x12, 0x04, 0xdb, 0x01, 0x0b, 0x25, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0c, 0x02, 0x00, 0x01, 0x12, 0x04, 0xdb, 0x01, 0x26, 0x2b, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0c, 0x02, 0x00, 0x03, 0x12, 0x04, 0xdb, 0x01, 0x2e, 0x2f, 0x0a, 0x4d, 0x0a, 0x04,
    0x04, 0x0c, 0x02, 0x01, 0x12, 0x04, 0xdd, 0x01, 0x02, 0x35, 0x1a, 0x3f, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61,
    0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68,
    0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x77, 0x69,
    0x6c, 0x6c, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0c, 0x02, 0x01, 0x04, 0x12, 0x04, 0xdd, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c,
    0x02, 0x01, 0x06, 0x12, 0x04, 0xdd, 0x01, 0x0b, 0x25, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02,
    0x01, 0x01, 0x12, 0x04, 0xdd, 0x01, 0x26, 0x30, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x01,
    0x03, 0x12, 0x04, 0xdd, 0x01, 0x33, 0x34, 0x0a, 0x49, 0x0a, 0x04, 0x04, 0x0c, 0x02, 0x02, 0x12,
    0x04, 0xdf, 0x01, 0x02, 0x23, 0x1a, 0x3b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x52, 0x61, 0x66, 0x74,
    0x20, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x20, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x2d, 0x62, 0x65, 0x20, 0x6c, 0x65,
    0x61, 0x73, 0x65, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x73,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x02, 0x04, 0x12, 0x04, 0xdf, 0x01, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x02, 0x05, 0x12, 0x04, 0xdf, 0x01, 0x0b, 0x11,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x02, 0x01, 0x12, 0x04, 0xdf, 0x01, 0x12, 0x1e, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x02, 0x03, 0x12, 0x04, 0xdf, 0x01, 0x21, 0x22, 0x0a, 0x5b,
    0x0a, 0x02, 0x04, 0x0d, 0x12, 0x06, 0xe3, 0x01, 0x00, 0xf3, 0x01, 0x01, 0x1a, 0x4d, 0x20, 0x4d,
    0x56, 0x43, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x68, 0x6f, 0x6c, 0x64,
    0x73, 0x20, 0x4d, 0x56, 0x43, 0x43, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x64, 0x20,
    0x62, 0x79, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
    0x65, 0x2f, 0x6d, 0x76, 0x63, 0x63, 0x2e, 0x67, 0x6f, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x0d, 0x01, 0x12, 0x04, 0xe3, 0x01, 0x08, 0x14, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x00,
    0x12, 0x04, 0xe4, 0x01, 0x02, 0x30, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x04, 0x12,
    0x04, 0xe4, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x06, 0x12, 0x04,
    0xe4, 0x01, 0x0b, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x01, 0x12, 0x04, 0xe4,
    0x01, 0x28, 0x2b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x03, 0x12, 0x04, 0xe4, 0x01,
    0x2e, 0x2f, 0x0a, 0x41, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x01, 0x12, 0x04, 0xe6, 0x01, 0x02, 0x34,
    0x1a, 0x33, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65, 0x63,
    0x65, 0x6e, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x20, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x04, 0x12, 0x04,
    0xe6, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x06, 0x12, 0x04, 0xe6,
    0x01, 0x0b, 0x25, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x01, 0x12, 0x04, 0xe6, 0x01,
    0x26, 0x2f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x03, 0x12, 0x04, 0xe6, 0x01, 0x32,
    0x33, 0x0a, 0x3e, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x02, 0x12, 0x04, 0xe8, 0x01, 0x02, 0x1c, 0x1a,
    0x30, 0x20, 0x49, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65,
    0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x20, 0x64, 0x65, 0x6c,
    0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x3f,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02, 0x04, 0x12, 0x04, 0xe8, 0x01, 0x02, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02, 0x05, 0x12, 0x04, 0xe8, 0x01, 0x0b, 0x0f, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02, 0x01, 0x12, 0x04, 0xe8, 0x01, 0x10, 0x17, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02, 0x03, 0x12, 0x04, 0xe8, 0x01, 0x1a, 0x1b, 0x0a, 0x41, 0x0a,
    0x04, 0x04, 0x0d, 0x02, 0x03, 0x12, 0x04, 0xea, 0x01, 0x02, 0x1f, 0x1a, 0x33, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65,
    0x6e, 0x74, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x03, 0x04, 0x12, 0x04, 0xea, 0x01, 0x02, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x03, 0x05, 0x12, 0x04, 0xea, 0x01, 0x0b, 0x10, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0d, 0x02, 0x03, 0x01, 0x12, 0x04, 0xea, 0x01, 0x11, 0x1a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0d, 0x02, 0x03, 0x03, 0x12, 0x04, 0xea, 0x01, 0x1d, 0x1e, 0x0a, 0x45, 0x0a, 0x04,
    0x04, 0x0d, 0x02, 0x04, 0x12, 0x04, 0xec, 0x01, 0x02, 0x1f, 0x1a, 0x37, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e,
    0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x04, 0x04, 0x12, 0x04, 0xec, 0x01,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x04, 0x05, 0x12, 0x04, 0xec, 0x01, 0x0b,
    0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x04, 0x01, 0x12, 0x04, 0xec, 0x01, 0x11, 0x1a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x04, 0x03, 0x12, 0x04, 0xec, 0x01, 0x1d, 0x1e, 0x0a,
    0xc4, 0x02, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x05, 0x12, 0x04, 0xf2, 0x01, 0x02, 0x2c, 0x1a, 0xb5,
    0x02, 0x20, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x20,
    0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
    0x61, 0x6d, 0x70, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
    0x65, 0x73, 0x0a, 0x20, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
    0x74, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x4d, 0x56,
    0x43, 0x43, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x65, 0x6e, 0x74,
    0x69, 0x6e, 0x65, 0x6c, 0x0a, 0x20, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65,
    0x71, 0x75, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x6f,
    0x77, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
    0x20, 0x3d, 0x3d, 0x20, 0x28, 0x30, 0x2c, 0x20, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x0a, 0x20, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
    0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x4d, 0x56, 0x43, 0x43, 0x20, 0x6d,
    0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x2c, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x0a, 0x20, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79,
    0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2c, 0x20, 0x6b, 0x65, 0x79, 0x5f,
    0x62, 0x79, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x5f, 0x62,
    0x79, 0x74, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x05, 0x04, 0x12,
    0x04, 0xf2, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x05, 0x06, 0x12, 0x04,
    0xf2, 0x01, 0x0b, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x05, 0x01, 0x12, 0x04, 0xf2,
    0x01, 0x22, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x05, 0x03, 0x12, 0x04, 0xf2, 0x01,
    0x2a, 0x2b, 0x0a, 0x74, 0x0a, 0x02, 0x04, 0x0e, 0x12, 0x06, 0xf7, 0x01, 0x00, 0xfd, 0x01, 0x01,
    0x1a, 0x66, 0x20, 0x47, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x68, 0x6f,
    0x6c, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63,
    0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x2f, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x0a, 0x20, 0x20, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c,
    0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61,
    0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0e, 0x01, 0x12,
    0x04, 0xf7, 0x01, 0x08, 0x12, 0x0a, 0x4f, 0x0a, 0x04, 0x04, 0x0e, 0x02, 0x00, 0x12, 0x04, 0xf9,
    0x01, 0x02, 0x25, 0x1a, 0x41, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x47,
    0x43, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
    0x20, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20,
    0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x78, 0x20, 0x65,
    0x70, 0x6f, 0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x00, 0x04, 0x12,
    0x04, 0xf9, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x00, 0x05, 0x12, 0x04,
    0xf9, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x00, 0x01, 0x12, 0x04, 0xf9,
    0x01, 0x11, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x00, 0x03, 0x12, 0x04, 0xf9, 0x01,
    0x23, 0x24, 0x0a, 0x7f, 0x0a, 0x04, 0x04, 0x0e, 0x02, 0x01, 0x12, 0x04, 0xfc, 0x01, 0x02, 0x29,
    0x1a, 0x71, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e,
    0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x69,
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
    0x6f, 0x6e, 0x64, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68,
    0x2e, 0x0a, 0x20, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,
    0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
    0x76, 0x65, 0x64, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
    0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x01, 0x04, 0x12, 0x04, 0xfc, 0x01,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x01, 0x05, 0x12, 0x04, 0xfc, 0x01, 0x0b,
    0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x01, 0x01, 0x12, 0x04, 0xfc, 0x01, 0x11, 0x24,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x01, 0x03, 0x12, 0x04, 0xfc, 0x01, 0x27, 0x28, 0x0a,
    0x71, 0x0a, 0x02, 0x04, 0x0f, 0x12, 0x06, 0x81, 0x02, 0x00, 0x8b, 0x02, 0x01, 0x1a, 0x63, 0x20,
    0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65,
    0x72, 0x69, 0x65, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x3b, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
    0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0f, 0x01, 0x12, 0x04, 0x81, 0x02, 0x08, 0x1b, 0x0a,
    0x6e, 0x0a, 0x04, 0x04, 0x0f, 0x02, 0x00, 0x12, 0x04, 0x84, 0x02, 0x02, 0x25, 0x1a, 0x60, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68,
    0x65, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e,
    0x74, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x65, 0x78,
    0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
    0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x0a, 0x20, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x78, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0f, 0x02, 0x00, 0x04, 0x12, 0x04, 0x84, 0x02, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0f, 0x02, 0x00, 0x05, 0x12, 0x04, 0x84, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0f, 0x02, 0x00, 0x01, 0x12, 0x04, 0x84, 0x02, 0x11, 0x20, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0f, 0x02, 0x00, 0x03, 0x12, 0x04, 0x84, 0x02, 0x23, 0x24, 0x0a, 0x85, 0x01, 0x0a, 0x04,
    0x04, 0x0f, 0x02, 0x01, 0x12, 0x04, 0x87, 0x02, 0x02, 0x1f, 0x1a, 0x77, 0x20, 0x41, 0x6e, 0x20,
    0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
    0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66,
    0x69, 0x65, 0x6c, 0x64, 0x0a, 0x20, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74,
    0x68, 0x65, 0x6e, 0x20, 0x27, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x27, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65,
    0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0f, 0x02, 0x01, 0x04, 0x12, 0x04, 0x87, 0x02,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0f, 0x02, 0x01, 0x05, 0x12, 0x04, 0x87, 0x02, 0x0b,
    0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0f, 0x02, 0x01, 0x01, 0x12, 0x04, 0x87, 0x02, 0x11, 0x1a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0f, 0x02, 0x01, 0x03, 0x12, 0x04, 0x87, 0x02, 0x1d, 0x1e, 0x0a,
    0x89, 0x01, 0x0a, 0x04, 0x04, 0x0f, 0x02, 0x02, 0x12, 0x04, 0x8a, 0x02, 0x02, 0x21, 0x1a, 0x7b,
    0x20, 0x41, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x69, 0x6e,
    0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
    0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
    0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x27, 0x69,
    0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0f, 0x02, 0x02, 0x04, 0x12, 0x04, 0x8a, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0f,
    0x02, 0x02, 0x05, 0x12, 0x04, 0x8a, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0f, 0x02,
    0x02, 0x01, 0x12, 0x04, 0x8a, 0x02, 0x11, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0f, 0x02, 0x02,
    0x03, 0x12, 0x04, 0x8a, 0x02, 0x1f, 0x20, 0x0a, 0xe2, 0x02, 0x0a, 0x02, 0x04, 0x10, 0x12, 0x06,
    0x92, 0x02, 0x00, 0x9a, 0x02, 0x01, 0x1a, 0xd3, 0x02, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
    0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65,
    0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x76, 0x61,
    0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x74, 0x0a,
    0x20, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
    0x20, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x6f,
    0x75, 0x72, 0x63, 0x65, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x2c, 0x20, 0x69, 0x6e, 0x0a, 0x20,
    0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x75, 0x6e,
    0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67,
    0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d,
    0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x0a, 0x20, 0x20, 0x63, 0x6f,
    0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
    0x64, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
    0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6d, 0x65, 0x73,
    0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69,
    0x6e, 0x67, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x0a, 0x20, 0x20, 0x6d, 0x65,
    0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03,
    0x04, 0x10, 0x01, 0x12, 0x04, 0x92, 0x02, 0x08, 0x16, 0x0a, 0x64, 0x0a, 0x04, 0x04, 0x10, 0x02,
    0x00, 0x12, 0x04, 0x95, 0x02, 0x02, 0x1b, 0x1a, 0x56, 0x20, 0x41, 0x20, 0x73, 0x74, 0x72, 0x69,
    0x6e, 0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c,
    0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77,
    0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x77,
    0x61, 0x73, 0x0a, 0x20, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x10, 0x02, 0x00, 0x04, 0x12, 0x04, 0x95, 0x02, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x10, 0x02, 0x00, 0x05, 0x12, 0x04, 0x95, 0x02, 0x0b, 0x11, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x10, 0x02, 0x00, 0x01, 0x12, 0x04, 0x95, 0x02, 0x12, 0x16, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x10, 0x02, 0x00, 0x03, 0x12, 0x04, 0x95, 0x02, 0x19, 0x1a, 0x0a, 0x61, 0x0a, 0x04, 0x04,
    0x10, 0x02, 0x01, 0x12, 0x04, 0x97, 0x02, 0x02, 0x1d, 0x1a, 0x53, 0x20, 0x41, 0x20, 0x73, 0x74,
    0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
    0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
    0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69,
    0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20,
    0x77, 0x61, 0x73, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x10, 0x02, 0x01, 0x04, 0x12, 0x04, 0x97, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x10, 0x02, 0x01, 0x05, 0x12, 0x04, 0x97, 0x02, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x10, 0x02, 0x01, 0x01, 0x12, 0x04, 0x97, 0x02, 0x12, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x10, 0x02, 0x01, 0x03, 0x12, 0x04, 0x97, 0x02, 0x1b, 0x1c, 0x0a, 0x59, 0x0a, 0x04, 0x04, 0x10,
    0x02, 0x02, 0x12, 0x04, 0x99, 0x02, 0x02, 0x3f, 0x1a, 0x4b, 0x20, 0x44, 0x61, 0x74, 0x61, 0x70,
    0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69,
    0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6d,
    0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x61, 0x6b, 0x65,
    0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61,
    0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x10, 0x02, 0x02, 0x04, 0x12, 0x04,
    0x99, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x10, 0x02, 0x02, 0x06, 0x12, 0x04, 0x99,
    0x02, 0x0b, 0x2f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x10, 0x02, 0x02, 0x01, 0x12, 0x04, 0x99, 0x02,
    0x30, 0x3a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x10, 0x02, 0x02, 0x03, 0x12, 0x04, 0x99, 0x02, 0x3d,
    0x3e, 0x0a, 0xab, 0x04, 0x0a, 0x02, 0x04, 0x11, 0x12, 0x06, 0xa5, 0x02, 0x00, 0xb1, 0x02, 0x01,
    0x1a, 0x9c, 0x04, 0x20, 0x4d, 0x56, 0x43, 0x43, 0x53, 0x74, 0x61, 0x74, 0x73, 0x20, 0x74, 0x72,
    0x61, 0x63, 0x6b, 0x73, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e,
    0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f,
    0x72, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x2d, 0x20, 0x4c, 0x69, 0x76, 0x65, 0x20, 0x6b, 0x65, 0x79,
    0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x77, 0x68,
    0x61, 0x74, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x63, 0x75, 0x72,
    0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72,
    0x65, 0x76, 0x65, 0x61, 0x6c, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6e, 0x6f, 0x74, 0x65,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
    0x64, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x6f,
    0x73, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
    0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x2d, 0x20, 0x4b, 0x65,
    0x79, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x2c, 0x20, 0x65, 0x76, 0x65, 0x6e,
    0x20, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x6f, 0x73, 0x74,
    0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x64, 0x65,
    0x6c, 0x65, 0x74, 0x65, 0x64, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x2d, 0x20, 0x56, 0x61, 0x6c, 0x75,
    0x65, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x0a,
    0x20, 0x20, 0x20, 0x2d, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x28,
    0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6b, 0x65, 0x79,
    0x73, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6b, 0x65, 0x79,
    0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x74,
    0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x2d, 0x20,
    0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x28, 0x61, 0x6c, 0x6c,
    0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
    0x64, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x6d,
    0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x2d, 0x20, 0x49, 0x6e,
    0x74, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
    0x61, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
    0x6e, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x78, 0x6e, 0x73, 0x29, 0x0a, 0x0a,
    0x0b, 0x0a, 0x03, 0x04, 0x11, 0x01, 0x12, 0x04, 0xa5, 0x02, 0x08, 0x11, 0x0a, 0x0c, 0x0a, 0x04,
    0x04, 0x11, 0x02, 0x00, 0x12, 0x04, 0xa6, 0x02, 0x02, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11,
    0x02, 0x00, 0x04, 0x12, 0x04, 0xa6, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02,
    0x00, 0x05, 0x12, 0x04, 0xa6, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x00,
    0x01, 0x12, 0x04, 0xa6, 0x02, 0x11, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x00, 0x03,
    0x12, 0x04, 0xa6, 0x02, 0x1e, 0x1f, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11, 0x02, 0x01, 0x12, 0x04,
    0xa7, 0x02, 0x02, 0x1f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x01, 0x04, 0x12, 0x04, 0xa7,
    0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x01, 0x05, 0x12, 0x04, 0xa7, 0x02,
    0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x01, 0x01, 0x12, 0x04, 0xa7, 0x02, 0x11,
    0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x01, 0x03, 0x12, 0x04, 0xa7, 0x02, 0x1d, 0x1e,
    0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11, 0x02, 0x02, 0x12, 0x04, 0xa8, 0x02, 0x02, 0x1f, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x11, 0x02, 0x02, 0x04, 0x12, 0x04, 0xa8, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x11, 0x02, 0x02, 0x05, 0x12, 0x04, 0xa8, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x11, 0x02, 0x02, 0x01, 0x12, 0x04, 0xa8, 0x02, 0x11, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x11, 0x02, 0x02, 0x03, 0x12, 0x04, 0xa8, 0x02, 0x1d, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11,
    0x02, 0x03, 0x12, 0x04, 0xa9, 0x02, 0x02, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x03,
    0x04, 0x12, 0x04, 0xa9, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x03, 0x05,
    0x12, 0x04, 0xa9, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x03, 0x01, 0x12,
    0x04, 0xa9, 0x02, 0x11, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x03, 0x03, 0x12, 0x04,
    0xa9, 0x02, 0x20, 0x21, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11, 0x02, 0x04, 0x12, 0x04, 0xaa, 0x02,
    0x02, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x04, 0x04, 0x12, 0x04, 0xaa, 0x02, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x04, 0x05, 0x12, 0x04, 0xaa, 0x02, 0x0b, 0x10,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x04, 0x01, 0x12, 0x04, 0xaa, 0x02, 0x11, 0x1b, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x04, 0x03, 0x12, 0x04, 0xaa, 0x02, 0x1e, 0x1f, 0x0a, 0x0c,
    0x0a, 0x04, 0x04, 0x11, 0x02, 0x05, 0x12, 0x04, 0xab, 0x02, 0x02, 0x1f, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x11, 0x02, 0x05, 0x04, 0x12, 0x04, 0xab, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x11, 0x02, 0x05, 0x05, 0x12, 0x04, 0xab, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11,
    0x02, 0x05, 0x01, 0x12, 0x04, 0xab, 0x02, 0x11, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02,
    0x05, 0x03, 0x12, 0x04, 0xab, 0x02, 0x1d, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11, 0x02, 0x06,
    0x12, 0x04, 0xac, 0x02, 0x02, 0x1f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x06, 0x04, 0x12,
    0x04, 0xac, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x06, 0x05, 0x12, 0x04,
    0xac, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x06, 0x01, 0x12, 0x04, 0xac,
    0x02, 0x11, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x06, 0x03, 0x12, 0x04, 0xac, 0x02,
    0x1d, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11, 0x02, 0x07, 0x12, 0x04, 0xad, 0x02, 0x02, 0x22,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x07, 0x04, 0x12, 0x04, 0xad, 0x02, 0x02, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x07, 0x05, 0x12, 0x04, 0xad, 0x02, 0x0b, 0x10, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x11, 0x02, 0x07, 0x01, 0x12, 0x04, 0xad, 0x02, 0x11, 0x1d, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x11, 0x02, 0x07, 0x03, 0x12, 0x04, 0xad, 0x02, 0x20, 0x21, 0x0a, 0x0c, 0x0a, 0x04,
    0x04, 0x11, 0x02, 0x08, 0x12, 0x04, 0xae, 0x02, 0x02, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11,
    0x02, 0x08, 0x04, 0x12, 0x04, 0xae, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02,
    0x08, 0x05, 0x12, 0x04, 0xae, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x08,
    0x01, 0x12, 0x04, 0xae, 0x02, 0x11, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x08, 0x03,
    0x12, 0x04, 0xae, 0x02, 0x1e, 0x1f, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11, 0x02, 0x09, 0x12, 0x04,
    0xaf, 0x02, 0x02, 0x23, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x09, 0x04, 0x12, 0x04, 0xaf,
    0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x09, 0x05, 0x12, 0x04, 0xaf, 0x02,
    0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x09, 0x01, 0x12, 0x04, 0xaf, 0x02, 0x11,
    0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x11, 0x02, 0x09, 0x03, 0x12, 0x04, 0xaf, 0x02, 0x20, 0x22,
    0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x11, 0x02, 0x0a, 0x12, 0x04, 0xb0, 0x02, 0x02, 0x28, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x11, 0x02, 0x0a, 0x04, 0x12, 0x04, 0xb0, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x11, 0x02, 0x0a, 0x05, 0x12, 0x04, 0xb0, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x11, 0x02, 0x0a, 0x01, 0x12, 0x04, 0xb0, 0x02, 0x11, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x11, 0x02, 0x0a, 0x03, 0x12, 0x04, 0xb0, 0x02, 0x25, 0x27,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
