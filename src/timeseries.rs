// This file is generated. Do not edit

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct TimeSeriesDatapoint {
    // message fields
    timestamp_nanos: ::std::option::Option<i64>,
    value: ::std::option::Option<f64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesDatapoint {
    pub fn new() -> TimeSeriesDatapoint {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesDatapoint {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesDatapoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesDatapoint,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesDatapoint {
                    timestamp_nanos: ::std::option::Option::None,
                    value: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 timestamp_nanos = 1;

    pub fn clear_timestamp_nanos(&mut self) {
        self.timestamp_nanos = ::std::option::Option::None;
    }

    pub fn has_timestamp_nanos(&self) -> bool {
        self.timestamp_nanos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_nanos(&mut self, v: i64) {
        self.timestamp_nanos = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp_nanos<'a>(&self) -> i64 {
        self.timestamp_nanos.unwrap_or(0)
    }

    // optional double value = 2;

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(v);
    }

    pub fn get_value<'a>(&self) -> f64 {
        self.value.unwrap_or(0.)
    }
}

impl ::protobuf::Message for TimeSeriesDatapoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.timestamp_nanos = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_double());
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.timestamp_nanos.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.value.is_some() {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timestamp_nanos {
            try!(os.write_int64(1, v));
        };
        if let Some(v) = self.value {
            try!(os.write_double(2, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesDatapoint>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesDatapoint {
    fn new() -> TimeSeriesDatapoint {
        TimeSeriesDatapoint::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesDatapoint>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "timestamp_nanos",
                    TimeSeriesDatapoint::has_timestamp_nanos,
                    TimeSeriesDatapoint::get_timestamp_nanos,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "value",
                    TimeSeriesDatapoint::has_value,
                    TimeSeriesDatapoint::get_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesDatapoint>(
                    "TimeSeriesDatapoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesDatapoint {
    fn clear(&mut self) {
        self.clear_timestamp_nanos();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesDatapoint {
    fn eq(&self, other: &TimeSeriesDatapoint) -> bool {
        self.timestamp_nanos == other.timestamp_nanos &&
        self.value == other.value &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesDatapoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TimeSeriesData {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    source: ::protobuf::SingularField<::std::string::String>,
    datapoints: ::protobuf::RepeatedField<TimeSeriesDatapoint>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesData {
    pub fn new() -> TimeSeriesData {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesData {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesData,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesData {
                    name: ::protobuf::SingularField::none(),
                    source: ::protobuf::SingularField::none(),
                    datapoints: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name<'a>(&'a self) -> &'a str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string source = 2;

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.source.is_none() {
            self.source.set_default();
        };
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        self.source.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_source<'a>(&'a self) -> &'a str {
        match self.source.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;

    pub fn clear_datapoints(&mut self) {
        self.datapoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_datapoints(&mut self, v: ::protobuf::RepeatedField<TimeSeriesDatapoint>) {
        self.datapoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_datapoints<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<TimeSeriesDatapoint> {
        &mut self.datapoints
    }

    // Take field
    pub fn take_datapoints(&mut self) -> ::protobuf::RepeatedField<TimeSeriesDatapoint> {
        ::std::mem::replace(&mut self.datapoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_datapoints<'a>(&'a self) -> &'a [TimeSeriesDatapoint] {
        &self.datapoints
    }
}

impl ::protobuf::Message for TimeSeriesData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.name.set_default();
                    try!(is.read_string_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.source.set_default();
                    try!(is.read_string_into(tmp))
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.datapoints));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.name.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.source.iter() {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in self.datapoints.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.source.as_ref() {
            try!(os.write_string(2, &v));
        };
        for v in self.datapoints.iter() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesData>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesData {
    fn new() -> TimeSeriesData {
        TimeSeriesData::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesData>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    TimeSeriesData::has_name,
                    TimeSeriesData::get_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "source",
                    TimeSeriesData::has_source,
                    TimeSeriesData::get_source,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "datapoints",
                    TimeSeriesData::get_datapoints,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesData>(
                    "TimeSeriesData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesData {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_source();
        self.clear_datapoints();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesData {
    fn eq(&self, other: &TimeSeriesData) -> bool {
        self.name == other.name &&
        self.source == other.source &&
        self.datapoints == other.datapoints &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TimeSeriesQueryRequest {
    // message fields
    start_nanos: ::std::option::Option<i64>,
    end_nanos: ::std::option::Option<i64>,
    queries: ::protobuf::RepeatedField<TimeSeriesQueryRequest_Query>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesQueryRequest {
    pub fn new() -> TimeSeriesQueryRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesQueryRequest {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesQueryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesQueryRequest,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesQueryRequest {
                    start_nanos: ::std::option::Option::None,
                    end_nanos: ::std::option::Option::None,
                    queries: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 start_nanos = 1;

    pub fn clear_start_nanos(&mut self) {
        self.start_nanos = ::std::option::Option::None;
    }

    pub fn has_start_nanos(&self) -> bool {
        self.start_nanos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_nanos(&mut self, v: i64) {
        self.start_nanos = ::std::option::Option::Some(v);
    }

    pub fn get_start_nanos<'a>(&self) -> i64 {
        self.start_nanos.unwrap_or(0)
    }

    // optional int64 end_nanos = 2;

    pub fn clear_end_nanos(&mut self) {
        self.end_nanos = ::std::option::Option::None;
    }

    pub fn has_end_nanos(&self) -> bool {
        self.end_nanos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_nanos(&mut self, v: i64) {
        self.end_nanos = ::std::option::Option::Some(v);
    }

    pub fn get_end_nanos<'a>(&self) -> i64 {
        self.end_nanos.unwrap_or(0)
    }

    // repeated .cockroach.proto.TimeSeriesQueryRequest.Query queries = 3;

    pub fn clear_queries(&mut self) {
        self.queries.clear();
    }

    // Param is passed by value, moved
    pub fn set_queries(&mut self, v: ::protobuf::RepeatedField<TimeSeriesQueryRequest_Query>) {
        self.queries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_queries<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<TimeSeriesQueryRequest_Query> {
        &mut self.queries
    }

    // Take field
    pub fn take_queries(&mut self) -> ::protobuf::RepeatedField<TimeSeriesQueryRequest_Query> {
        ::std::mem::replace(&mut self.queries, ::protobuf::RepeatedField::new())
    }

    pub fn get_queries<'a>(&'a self) -> &'a [TimeSeriesQueryRequest_Query] {
        &self.queries
    }
}

impl ::protobuf::Message for TimeSeriesQueryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.start_nanos = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.end_nanos = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.queries));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.start_nanos.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.end_nanos.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.queries.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.start_nanos {
            try!(os.write_int64(1, v));
        };
        if let Some(v) = self.end_nanos {
            try!(os.write_int64(2, v));
        };
        for v in self.queries.iter() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesQueryRequest>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesQueryRequest {
    fn new() -> TimeSeriesQueryRequest {
        TimeSeriesQueryRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesQueryRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "start_nanos",
                    TimeSeriesQueryRequest::has_start_nanos,
                    TimeSeriesQueryRequest::get_start_nanos,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "end_nanos",
                    TimeSeriesQueryRequest::has_end_nanos,
                    TimeSeriesQueryRequest::get_end_nanos,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "queries",
                    TimeSeriesQueryRequest::get_queries,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesQueryRequest>(
                    "TimeSeriesQueryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesQueryRequest {
    fn clear(&mut self) {
        self.clear_start_nanos();
        self.clear_end_nanos();
        self.clear_queries();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesQueryRequest {
    fn eq(&self, other: &TimeSeriesQueryRequest) -> bool {
        self.start_nanos == other.start_nanos &&
        self.end_nanos == other.end_nanos &&
        self.queries == other.queries &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesQueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TimeSeriesQueryRequest_Query {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    aggregator: ::std::option::Option<TimeSeriesQueryAggregator>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesQueryRequest_Query {
    pub fn new() -> TimeSeriesQueryRequest_Query {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesQueryRequest_Query {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesQueryRequest_Query> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesQueryRequest_Query,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesQueryRequest_Query {
                    name: ::protobuf::SingularField::none(),
                    aggregator: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name<'a>(&'a self) -> &'a str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .cockroach.proto.TimeSeriesQueryAggregator aggregator = 2;

    pub fn clear_aggregator(&mut self) {
        self.aggregator = ::std::option::Option::None;
    }

    pub fn has_aggregator(&self) -> bool {
        self.aggregator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aggregator(&mut self, v: TimeSeriesQueryAggregator) {
        self.aggregator = ::std::option::Option::Some(v);
    }

    pub fn get_aggregator<'a>(&self) -> TimeSeriesQueryAggregator {
        self.aggregator.unwrap_or(TimeSeriesQueryAggregator::AVG)
    }
}

impl ::protobuf::Message for TimeSeriesQueryRequest_Query {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.name.set_default();
                    try!(is.read_string_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.aggregator = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.name.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.aggregator.iter() {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.aggregator {
            try!(os.write_enum(2, v as i32));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesQueryRequest_Query>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesQueryRequest_Query {
    fn new() -> TimeSeriesQueryRequest_Query {
        TimeSeriesQueryRequest_Query::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesQueryRequest_Query>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    TimeSeriesQueryRequest_Query::has_name,
                    TimeSeriesQueryRequest_Query::get_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "aggregator",
                    TimeSeriesQueryRequest_Query::has_aggregator,
                    TimeSeriesQueryRequest_Query::get_aggregator,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesQueryRequest_Query>(
                    "TimeSeriesQueryRequest_Query",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesQueryRequest_Query {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_aggregator();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesQueryRequest_Query {
    fn eq(&self, other: &TimeSeriesQueryRequest_Query) -> bool {
        self.name == other.name &&
        self.aggregator == other.aggregator &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesQueryRequest_Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TimeSeriesQueryResponse {
    // message fields
    results: ::protobuf::RepeatedField<TimeSeriesQueryResponse_Result>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesQueryResponse {
    pub fn new() -> TimeSeriesQueryResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesQueryResponse {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesQueryResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesQueryResponse,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesQueryResponse {
                    results: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // repeated .cockroach.proto.TimeSeriesQueryResponse.Result results = 1;

    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<TimeSeriesQueryResponse_Result>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<TimeSeriesQueryResponse_Result> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<TimeSeriesQueryResponse_Result> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }

    pub fn get_results<'a>(&'a self) -> &'a [TimeSeriesQueryResponse_Result] {
        &self.results
    }
}

impl ::protobuf::Message for TimeSeriesQueryResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.results.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in self.results.iter() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesQueryResponse>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesQueryResponse {
    fn new() -> TimeSeriesQueryResponse {
        TimeSeriesQueryResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesQueryResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "results",
                    TimeSeriesQueryResponse::get_results,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesQueryResponse>(
                    "TimeSeriesQueryResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesQueryResponse {
    fn clear(&mut self) {
        self.clear_results();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesQueryResponse {
    fn eq(&self, other: &TimeSeriesQueryResponse) -> bool {
        self.results == other.results &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesQueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TimeSeriesQueryResponse_Result {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    sources: ::protobuf::RepeatedField<::std::string::String>,
    aggregator: ::std::option::Option<TimeSeriesQueryAggregator>,
    datapoints: ::protobuf::RepeatedField<TimeSeriesDatapoint>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl TimeSeriesQueryResponse_Result {
    pub fn new() -> TimeSeriesQueryResponse_Result {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TimeSeriesQueryResponse_Result {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeriesQueryResponse_Result> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeriesQueryResponse_Result,
        };
        unsafe {
            instance.get(|| {
                TimeSeriesQueryResponse_Result {
                    name: ::protobuf::SingularField::none(),
                    sources: ::protobuf::RepeatedField::new(),
                    aggregator: ::std::option::Option::None,
                    datapoints: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name<'a>(&'a self) -> &'a str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // repeated string sources = 2;

    pub fn clear_sources(&mut self) {
        self.sources.clear();
    }

    // Param is passed by value, moved
    pub fn set_sources(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.sources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sources<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.sources
    }

    // Take field
    pub fn take_sources(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.sources, ::protobuf::RepeatedField::new())
    }

    pub fn get_sources<'a>(&'a self) -> &'a [::std::string::String] {
        &self.sources
    }

    // optional .cockroach.proto.TimeSeriesQueryAggregator aggregator = 3;

    pub fn clear_aggregator(&mut self) {
        self.aggregator = ::std::option::Option::None;
    }

    pub fn has_aggregator(&self) -> bool {
        self.aggregator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aggregator(&mut self, v: TimeSeriesQueryAggregator) {
        self.aggregator = ::std::option::Option::Some(v);
    }

    pub fn get_aggregator<'a>(&self) -> TimeSeriesQueryAggregator {
        self.aggregator.unwrap_or(TimeSeriesQueryAggregator::AVG)
    }

    // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 4;

    pub fn clear_datapoints(&mut self) {
        self.datapoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_datapoints(&mut self, v: ::protobuf::RepeatedField<TimeSeriesDatapoint>) {
        self.datapoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_datapoints<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<TimeSeriesDatapoint> {
        &mut self.datapoints
    }

    // Take field
    pub fn take_datapoints(&mut self) -> ::protobuf::RepeatedField<TimeSeriesDatapoint> {
        ::std::mem::replace(&mut self.datapoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_datapoints<'a>(&'a self) -> &'a [TimeSeriesDatapoint] {
        &self.datapoints
    }
}

impl ::protobuf::Message for TimeSeriesQueryResponse_Result {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.name.set_default();
                    try!(is.read_string_into(tmp))
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.sources));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.aggregator = ::std::option::Option::Some(tmp);
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.datapoints));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.name.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.sources.iter() {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in self.aggregator.iter() {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        for value in self.datapoints.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(1, &v));
        };
        for v in self.sources.iter() {
            try!(os.write_string(2, &v));
        };
        if let Some(v) = self.aggregator {
            try!(os.write_enum(3, v as i32));
        };
        for v in self.datapoints.iter() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TimeSeriesQueryResponse_Result>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TimeSeriesQueryResponse_Result {
    fn new() -> TimeSeriesQueryResponse_Result {
        TimeSeriesQueryResponse_Result::new()
    }

    fn descriptor_static(_: ::std::option::Option<TimeSeriesQueryResponse_Result>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    TimeSeriesQueryResponse_Result::has_name,
                    TimeSeriesQueryResponse_Result::get_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_string_accessor(
                    "sources",
                    TimeSeriesQueryResponse_Result::get_sources,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "aggregator",
                    TimeSeriesQueryResponse_Result::has_aggregator,
                    TimeSeriesQueryResponse_Result::get_aggregator,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "datapoints",
                    TimeSeriesQueryResponse_Result::get_datapoints,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeriesQueryResponse_Result>(
                    "TimeSeriesQueryResponse_Result",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TimeSeriesQueryResponse_Result {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_sources();
        self.clear_aggregator();
        self.clear_datapoints();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TimeSeriesQueryResponse_Result {
    fn eq(&self, other: &TimeSeriesQueryResponse_Result) -> bool {
        self.name == other.name &&
        self.sources == other.sources &&
        self.aggregator == other.aggregator &&
        self.datapoints == other.datapoints &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TimeSeriesQueryResponse_Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug)]
pub enum TimeSeriesQueryAggregator {
    AVG = 1,
    AVG_RATE = 2,
}

impl ::protobuf::ProtobufEnum for TimeSeriesQueryAggregator {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TimeSeriesQueryAggregator> {
        match value {
            1 => ::std::option::Option::Some(TimeSeriesQueryAggregator::AVG),
            2 => ::std::option::Option::Some(TimeSeriesQueryAggregator::AVG_RATE),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<TimeSeriesQueryAggregator>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TimeSeriesQueryAggregator", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TimeSeriesQueryAggregator {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x20, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
    0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x0f, 0x74, 0x69,
    0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x03, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
    0x28, 0x01, 0x22, 0x68, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
    0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x09, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
    0x28, 0x09, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61,
    0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
    0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xdc, 0x01, 0x0a,
    0x16, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
    0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
    0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09,
    0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x12,
    0x3e, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
    0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65,
    0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
    0x5a, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
    0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x63,
    0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
    0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72,
    0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x03, 0x41, 0x56, 0x47, 0x22, 0x84, 0x02, 0x0a, 0x17,
    0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72,
    0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
    0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x52, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x09, 0x12, 0x0f, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
    0x03, 0x28, 0x09, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
    0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f,
    0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
    0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
    0x74, 0x6f, 0x72, 0x3a, 0x03, 0x41, 0x56, 0x47, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
    0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
    0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69,
    0x6e, 0x74, 0x2a, 0x32, 0x0a, 0x19, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
    0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12,
    0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x56, 0x47, 0x5f,
    0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0x07, 0x5a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4a,
    0xc0, 0x21, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x56, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12,
    0x03, 0x02, 0x08, 0x17, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x04, 0x00, 0x1c, 0x0a, 0x0b,
    0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x04, 0x00, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x08,
    0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x04, 0x07, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x04, 0x07, 0x11, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x04, 0x07, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00,
    0x07, 0x12, 0x03, 0x04, 0x14, 0x1b, 0x0a, 0xc8, 0x03, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x0c,
    0x00, 0x13, 0x01, 0x1a, 0xbb, 0x03, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
    0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
    0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74,
    0x20, 0x6f, 0x66, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
    0x61, 0x72, 0x65, 0x0a, 0x20, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x62, 0x65, 0x66,
    0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
    0x65, 0x6d, 0x20, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
    0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x20, 0x0a, 0x20, 0x20, 0x43, 0x6f, 0x63, 0x6b, 0x72, 0x6f,
    0x61, 0x63, 0x68, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x61,
    0x74, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x2c,
    0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x22, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61,
    0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x0a, 0x20, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70,
    0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64,
    0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x70,
    0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65,
    0x61, 0x63, 0x68, 0x0a, 0x20, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x65, 0x72,
    0x69, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
    0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65,
    0x67, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
    0x6f, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x66, 0x65, 0x6c, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e,
    0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x0c, 0x05, 0x1e, 0x0a, 0x50, 0x0a,
    0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0e, 0x02, 0x0a, 0x1a, 0x43, 0x20, 0x41, 0x56, 0x47,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x76, 0x65,
    0x72, 0x61, 0x67, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0e, 0x02, 0x05, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0e, 0x08, 0x09, 0x0a, 0xc2, 0x01, 0x0a, 0x04,
    0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x12, 0x02, 0x0f, 0x1a, 0xb4, 0x01, 0x20, 0x41, 0x56, 0x47,
    0x5f, 0x52, 0x41, 0x54, 0x45, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20,
    0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20,
    0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x27, 0x73, 0x0a, 0x20, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f,
    0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61,
    0x72, 0x20, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74,
    0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x73,
    0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x27, 0x73,
    0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x12, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x12, 0x0d, 0x0e, 0x0a, 0x6f, 0x0a, 0x02,
    0x04, 0x00, 0x12, 0x04, 0x17, 0x00, 0x1d, 0x01, 0x1a, 0x63, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53,
    0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x69,
    0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20,
    0x64, 0x61, 0x74, 0x61, 0x3b, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x73,
    0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x17, 0x08, 0x1b, 0x0a, 0x6d, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x1a, 0x02, 0x25, 0x1a, 0x60, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f,
    0x63, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
    0x20, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x0a,
    0x20, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x78,
    0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x04, 0x12, 0x03, 0x1a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12,
    0x03, 0x1a, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1a,
    0x11, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x1a, 0x23, 0x24,
    0x0a, 0x4e, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x1c, 0x02, 0x1c, 0x1a, 0x41, 0x20,
    0x41, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x1c, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x1c, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1c, 0x12, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x1c, 0x1a, 0x1b, 0x0a, 0xb9, 0x02, 0x0a, 0x02, 0x04, 0x01, 0x12,
    0x04, 0x23, 0x00, 0x2b, 0x01, 0x1a, 0xac, 0x02, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
    0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74,
    0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
    0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d,
    0x65, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x20,
    0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x20, 0x69, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d,
    0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20,
    0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x6f, 0x75,
    0x72, 0x63, 0x65, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x2c, 0x20, 0x69, 0x6e, 0x0a, 0x20, 0x20,
    0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x75, 0x6e, 0x69,
    0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x62,
    0x65, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x20, 0x4d,
    0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x20, 0x20, 0x64, 0x61, 0x74,
    0x61, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64,
    0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73,
    0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
    0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x23, 0x08, 0x16,
    0x0a, 0x63, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x26, 0x02, 0x1b, 0x1a, 0x56, 0x20,
    0x41, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x75,
    0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
    0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20,
    0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x61, 0x73, 0x0a, 0x20, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75,
    0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03,
    0x26, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x05, 0x12, 0x03, 0x26, 0x0b,
    0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x26, 0x12, 0x16, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x26, 0x19, 0x1a, 0x0a, 0x60, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x28, 0x02, 0x1d, 0x1a, 0x53, 0x20, 0x41, 0x20, 0x73,
    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x64, 0x65, 0x6e,
    0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75,
    0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68,
    0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
    0x20, 0x77, 0x61, 0x73, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03, 0x28, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x01, 0x05, 0x12, 0x03, 0x28, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x28, 0x12, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x28, 0x1b, 0x1c, 0x0a, 0x58, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12,
    0x03, 0x2a, 0x02, 0x3f, 0x1a, 0x4b, 0x20, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f,
    0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75,
    0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72,
    0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x03, 0x2a, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x06, 0x12, 0x03, 0x2a, 0x0b, 0x2f, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2a, 0x30, 0x3a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x02, 0x03, 0x12, 0x03, 0x2a, 0x3d, 0x3e, 0x0a, 0x7a, 0x0a, 0x02, 0x04, 0x02, 0x12,
    0x04, 0x2f, 0x00, 0x41, 0x01, 0x1a, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
    0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69,
    0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x69,
    0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72,
    0x69, 0x65, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x0a, 0x20, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f,
    0x6d, 0x20, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x20, 0x63, 0x6c, 0x69, 0x65,
    0x6e, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x2f, 0x08,
    0x1e, 0x0a, 0x63, 0x0a, 0x04, 0x04, 0x02, 0x03, 0x00, 0x12, 0x04, 0x32, 0x02, 0x37, 0x03, 0x1a,
    0x55, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x64, 0x65, 0x66,
    0x69, 0x6e, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
    0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
    0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x70,
    0x61, 0x6e, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x03, 0x00, 0x01, 0x12,
    0x03, 0x32, 0x0a, 0x0f, 0x0a, 0x36, 0x0a, 0x06, 0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x34, 0x04, 0x1d, 0x1a, 0x27, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65,
    0x73, 0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x34, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x34, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x34, 0x14, 0x18, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x34, 0x1b, 0x1c, 0x0a, 0x4b, 0x0a, 0x06,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03, 0x36, 0x04, 0x57, 0x1a, 0x3c, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x75,
    0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20,
    0x74, 0x6f, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x36, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x36, 0x0d, 0x37, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x36, 0x38, 0x42, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x36, 0x45, 0x46, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x01, 0x08, 0x12, 0x03, 0x36, 0x47, 0x56, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x01, 0x07, 0x12, 0x03, 0x36, 0x52, 0x55, 0x0a, 0x6a, 0x0a, 0x04, 0x04, 0x02, 0x02,
    0x00, 0x12, 0x03, 0x3a, 0x02, 0x21, 0x1a, 0x5d, 0x20, 0x41, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73,
    0x74, 0x61, 0x6d, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
    0x6e, 0x64, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
    0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x62, 0x6f, 0x75, 0x6e,
    0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x70,
    0x61, 0x6e, 0x0a, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x71, 0x75,
    0x65, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x03,
    0x3a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05, 0x12, 0x03, 0x3a, 0x0b,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x3a, 0x11, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x3a, 0x1f, 0x20, 0x0a, 0x8b, 0x01,
    0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x3d, 0x02, 0x1f, 0x1a, 0x7e, 0x20, 0x41, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6e,
    0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x64,
    0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x20,
    0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x0a, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
    0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x73, 0x74,
    0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x3d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x01, 0x05, 0x12, 0x03, 0x3d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x3d, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x3d, 0x1d, 0x1e, 0x0a, 0x5b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x40, 0x02, 0x45,
    0x1a, 0x4e, 0x20, 0x41, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x51, 0x75, 0x65, 0x72,
    0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
    0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61,
    0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x0a, 0x20, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x03, 0x40, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06, 0x12, 0x03, 0x40, 0x0b, 0x38, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x40, 0x39, 0x40, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x40, 0x43, 0x44, 0x0a, 0x77, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04,
    0x45, 0x00, 0x56, 0x01, 0x1a, 0x6b, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
    0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x69,
    0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x72,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x0a,
    0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f,
    0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
    0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x45, 0x08, 0x1f, 0x0a, 0x58, 0x0a,
    0x04, 0x04, 0x03, 0x03, 0x00, 0x12, 0x04, 0x47, 0x02, 0x51, 0x03, 0x1a, 0x4a, 0x20, 0x52, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61,
    0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x71,
    0x75, 0x65, 0x72, 0x79, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x20, 0x73, 0x70, 0x61, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x03, 0x00, 0x01,
    0x12, 0x03, 0x47, 0x0a, 0x10, 0x0a, 0x65, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x4a, 0x04, 0x1d, 0x1a, 0x56, 0x20, 0x41, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
    0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69,
    0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61,
    0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63,
    0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x61, 0x73, 0x0a,
    0x20, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x4a, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x4a, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x4a, 0x14, 0x18, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x4a, 0x1b, 0x1c, 0x0a, 0x46, 0x0a, 0x06,
    0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03, 0x4c, 0x04, 0x20, 0x1a, 0x37, 0x20, 0x41, 0x20,
    0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20,
    0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
    0x61, 0x74, 0x61, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
    0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x04, 0x12,
    0x03, 0x4c, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x05, 0x12,
    0x03, 0x4c, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x4c, 0x14, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12,
    0x03, 0x4c, 0x1e, 0x1f, 0x0a, 0x4a, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x12, 0x03,
    0x4e, 0x04, 0x57, 0x1a, 0x3b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
    0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x0a,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x4e, 0x04, 0x0c,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x4e, 0x0d, 0x37,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x4e, 0x38, 0x42,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x4e, 0x45, 0x46,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x08, 0x12, 0x03, 0x4e, 0x47, 0x56,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x07, 0x12, 0x03, 0x4e, 0x52, 0x55,
    0x0a, 0x38, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02, 0x03, 0x12, 0x03, 0x50, 0x04, 0x41, 0x1a,
    0x29, 0x20, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x64, 0x65, 0x73,
    0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72,
    0x69, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03,
    0x03, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x50, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03,
    0x03, 0x00, 0x02, 0x03, 0x06, 0x12, 0x03, 0x50, 0x0d, 0x31, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03,
    0x03, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x50, 0x32, 0x3c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03,
    0x03, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x50, 0x3f, 0x40, 0x0a, 0xdd, 0x01, 0x0a, 0x04, 0x04,
    0x03, 0x02, 0x00, 0x12, 0x03, 0x55, 0x02, 0x47, 0x1a, 0xcf, 0x01, 0x20, 0x41, 0x20, 0x73, 0x65,
    0x74, 0x20, 0x6f, 0x66, 0x20, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3b, 0x20, 0x74, 0x68,
    0x65, 0x72, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20,
    0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
    0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x74,
    0x63, 0x68, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
    0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65,
    0x72, 0x2e, 0x20, 0x41, 0x20, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x0a,
    0x20, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x65, 0x76, 0x65,
    0x6e, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x7a,
    0x65, 0x72, 0x6f, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x74,
    0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x00, 0x04, 0x12, 0x03, 0x55, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00,
    0x06, 0x12, 0x03, 0x55, 0x0b, 0x3a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x55, 0x3b, 0x42, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x55,
    0x45, 0x46,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
